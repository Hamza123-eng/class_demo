
STM32_TMC5130.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002744  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a94  08002a94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a9c  08002a9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  2000000c  08002ab0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08002ab0  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010232  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000245b  00000000  00000000  0003026e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a78  00000000  00000000  000326d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001700  00000000  00000000  00033148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e2d  00000000  00000000  00034848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5e3  00000000  00000000  0004c675  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ce4f  00000000  00000000  00056c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3aa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000205c  00000000  00000000  000e3b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00007458  00000000  00000000  000e5b80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080028c0 	.word	0x080028c0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080028c0 	.word	0x080028c0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <App_Main>:
#include "main.h"

TMC5160TypeDef Motor_X;

void App_Main(void)
{
 80004d4:	b510      	push	{r4, lr}
	int32_t sts = 0;

	Motor_X.CS_Port = SPI_CS_X_GPIO_Port;
 80004d6:	4c36      	ldr	r4, [pc, #216]	; (80005b0 <App_Main+0xdc>)
 80004d8:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <App_Main+0xe0>)
 80004da:	6023      	str	r3, [r4, #0]
	Motor_X.CS_Pin = SPI_CS_X_Pin;

	TMC5160_IO_Init(&Motor_X);
 80004dc:	4620      	mov	r0, r4
	Motor_X.CS_Pin = SPI_CS_X_Pin;
 80004de:	2340      	movs	r3, #64	; 0x40
 80004e0:	80a3      	strh	r3, [r4, #4]
	TMC5160_IO_Init(&Motor_X);
 80004e2:	f002 f807 	bl	80024f4 <TMC5160_IO_Init>
	// My_Write_Register(&Motor_X, 0xA0, 0x00000000);
	// My_Write_Register(&Motor_X, 0xAD, 0xFFFF3800);

	//_------>

	TMC5160_Set_Chopper_TOff(&Motor_X, 4);			 //
 80004e6:	4620      	mov	r0, r4
 80004e8:	2104      	movs	r1, #4
 80004ea:	f001 ff97 	bl	800241c <TMC5160_Set_Chopper_TOff>
	TMC5160_Set_Chopper_Blank_Time(&Motor_X, 0b10);	 //
 80004ee:	4620      	mov	r0, r4
 80004f0:	2102      	movs	r1, #2
 80004f2:	f001 ff81 	bl	80023f8 <TMC5160_Set_Chopper_Blank_Time>
	TMC5160_Set_I_MAX(&Motor_X, 4);					 //
 80004f6:	4620      	mov	r0, r4
 80004f8:	2104      	movs	r1, #4
 80004fa:	f001 fefd 	bl	80022f8 <TMC5160_Set_I_MAX>
	TMC5160_Set_I_STBY(&Motor_X, 2);				 //
 80004fe:	4620      	mov	r0, r4
 8000500:	2102      	movs	r1, #2
 8000502:	f001 ff0b 	bl	800231c <TMC5160_Set_I_STBY>
	TMC5160_Set_Microstep_Resolution(&Motor_X, 256); //
 8000506:	4620      	mov	r0, r4
 8000508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050c:	f001 ff72 	bl	80023f4 <TMC5160_Set_Microstep_Resolution>
	TMC5160_Set_SE_Speed_THRESH(&Motor_X, 0xFFFFF);
 8000510:	4620      	mov	r0, r4
 8000512:	4929      	ldr	r1, [pc, #164]	; (80005b8 <App_Main+0xe4>)
 8000514:	f001 ffdc 	bl	80024d0 <TMC5160_Set_SE_Speed_THRESH>
	TMC5160_Set_SE_HSpeed_THRESH(&Motor_X, 0);
 8000518:	4620      	mov	r0, r4
 800051a:	2100      	movs	r1, #0
 800051c:	f001 ff58 	bl	80023d0 <TMC5160_Set_SE_HSpeed_THRESH>
	TMC5160_Set_SE_I_MIN(&Motor_X, 5);
 8000520:	4620      	mov	r0, r4
 8000522:	2105      	movs	r1, #5
 8000524:	f001 ff8c 	bl	8002440 <TMC5160_Set_SE_I_MIN>
	TMC5160_Set_SE_HYS(&Motor_X, 2);
 8000528:	4620      	mov	r0, r4
 800052a:	2102      	movs	r1, #2
 800052c:	f001 ffac 	bl	8002488 <TMC5160_Set_SE_HYS>
	TMC5160_Set_SE_I_DWN_Step(&Motor_X, 0b01);
 8000530:	4620      	mov	r0, r4
 8000532:	2101      	movs	r1, #1
 8000534:	f001 ff96 	bl	8002464 <TMC5160_Set_SE_I_DWN_Step>

	TMC5160_Set_ACC_A1(&Motor_X, 0x3E8);
 8000538:	4620      	mov	r0, r4
 800053a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800053e:	f001 ff2f 	bl	80023a0 <TMC5160_Set_ACC_A1>
	TMC5160_Set_ACC_MAX(&Motor_X, 0x1F4);
 8000542:	4620      	mov	r0, r4
 8000544:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000548:	f001 fed2 	bl	80022f0 <TMC5160_Set_ACC_MAX>

	TMC5160_Set_VEL_Start(&Motor_X, 100);
 800054c:	4620      	mov	r0, r4
 800054e:	2164      	movs	r1, #100	; 0x64
 8000550:	f001 ff36 	bl	80023c0 <TMC5160_Set_VEL_Start>
	TMC5160_Set_VEL_V1(&Motor_X, 0x0);
 8000554:	4620      	mov	r0, r4
 8000556:	2100      	movs	r1, #0
 8000558:	f001 ff26 	bl	80023a8 <TMC5160_Set_VEL_V1>
	TMC5160_Set_VEL_MAX(&Motor_X, 0x196A0);
 800055c:	4620      	mov	r0, r4
 800055e:	4917      	ldr	r1, [pc, #92]	; (80005bc <App_Main+0xe8>)
 8000560:	f001 feb0 	bl	80022c4 <TMC5160_Set_VEL_MAX>
	TMC5160_Set_VEL_Stop(&Motor_X, 0xA);
 8000564:	4620      	mov	r0, r4
 8000566:	210a      	movs	r1, #10
 8000568:	f001 ff2e 	bl	80023c8 <TMC5160_Set_VEL_Stop>

	TMC5160_Set_DEC_MAX(&Motor_X, 0x2BC);
 800056c:	4620      	mov	r0, r4
 800056e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8000572:	f001 ff1d 	bl	80023b0 <TMC5160_Set_DEC_MAX>
	TMC5160_Set_DEC_D1(&Motor_X, 0x578);
 8000576:	4620      	mov	r0, r4
 8000578:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800057c:	f001 ff1c 	bl	80023b8 <TMC5160_Set_DEC_D1>

	TMC5160_Set_stallGuard2_THRESH(&Motor_X, 12);
 8000580:	4620      	mov	r0, r4
 8000582:	210c      	movs	r1, #12
 8000584:	f001 ff92 	bl	80024ac <TMC5160_Set_stallGuard2_THRESH>
	TMC5160_Set_Auto_Right_Stop(&Motor_X, 0);
 8000588:	4620      	mov	r0, r4
 800058a:	2100      	movs	r1, #0
 800058c:	f001 fed8 	bl	8002340 <TMC5160_Set_Auto_Right_Stop>
	TMC5160_Set_Auto_Left_Stop(&Motor_X, 0);
 8000590:	4620      	mov	r0, r4
 8000592:	2100      	movs	r1, #0
 8000594:	f001 feec 	bl	8002370 <TMC5160_Set_Auto_Left_Stop>

	My_Write_Register(&Motor_X, 0x80, 0x00000004);
 8000598:	4620      	mov	r0, r4
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	2204      	movs	r2, #4
 800059e:	f002 f8a1 	bl	80026e4 <My_Write_Register>

	TMC5160_Run(&Motor_X, -1000000);
 80005a2:	4620      	mov	r0, r4
 80005a4:	4906      	ldr	r1, [pc, #24]	; (80005c0 <App_Main+0xec>)

	UNUSED(sts);
}
 80005a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TMC5160_Run(&Motor_X, -1000000);
 80005aa:	f001 be77 	b.w	800229c <TMC5160_Run>
 80005ae:	bf00      	nop
 80005b0:	2000002c 	.word	0x2000002c
 80005b4:	40020400 	.word	0x40020400
 80005b8:	000fffff 	.word	0x000fffff
 80005bc:	000196a0 	.word	0x000196a0
 80005c0:	fff0bdc0 	.word	0xfff0bdc0

080005c4 <MX_GPIO_Init>:
 * EXTI
 * Free pins are configured automatically as Analog (this feature is enabled through
 * the Code Generation settings)
 */
void MX_GPIO_Init(void)
{
 80005c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	2400      	movs	r4, #0
{
 80005ca:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80005d0:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d4:	4b52      	ldr	r3, [pc, #328]	; (8000720 <MX_GPIO_Init+0x15c>)
 80005d6:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TMC_EN_GPIO_Port, TMC_EN_Pin, GPIO_PIN_SET);
 80005dc:	4d51      	ldr	r5, [pc, #324]	; (8000724 <MX_GPIO_Init+0x160>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_X_Pin | DIR_X_Pin | DIR_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_Y_GPIO_Port, STEP_Y_Pin, GPIO_PIN_RESET);
 80005de:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8000734 <MX_GPIO_Init+0x170>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Y_Pin | SPI_CS_X_Pin, GPIO_PIN_SET);
 80005e2:	4f51      	ldr	r7, [pc, #324]	; (8000728 <MX_GPIO_Init+0x164>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e4:	f042 0204 	orr.w	r2, r2, #4
 80005e8:	631a      	str	r2, [r3, #48]	; 0x30
 80005ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ec:	f002 0204 	and.w	r2, r2, #4
 80005f0:	9200      	str	r2, [sp, #0]
 80005f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f4:	9401      	str	r4, [sp, #4]
 80005f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005fc:	631a      	str	r2, [r3, #48]	; 0x30
 80005fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000600:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	9402      	str	r4, [sp, #8]
 800060a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060c:	f042 0201 	orr.w	r2, r2, #1
 8000610:	631a      	str	r2, [r3, #48]	; 0x30
 8000612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000614:	f002 0201 	and.w	r2, r2, #1
 8000618:	9202      	str	r2, [sp, #8]
 800061a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	9403      	str	r4, [sp, #12]
 800061e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000620:	f042 0202 	orr.w	r2, r2, #2
 8000624:	631a      	str	r2, [r3, #48]	; 0x30
 8000626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000628:	f002 0202 	and.w	r2, r2, #2
 800062c:	9203      	str	r2, [sp, #12]
 800062e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000630:	9404      	str	r4, [sp, #16]
 8000632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000634:	f042 0208 	orr.w	r2, r2, #8
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f003 0308 	and.w	r3, r3, #8
 8000640:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(TMC_EN_GPIO_Port, TMC_EN_Pin, GPIO_PIN_SET);
 8000642:	4628      	mov	r0, r5
 8000644:	2201      	movs	r2, #1
 8000646:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000648:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(TMC_EN_GPIO_Port, TMC_EN_Pin, GPIO_PIN_SET);
 800064a:	f000 fbfd 	bl	8000e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, STEP_X_Pin | DIR_X_Pin | DIR_Y_Pin, GPIO_PIN_RESET);
 800064e:	4622      	mov	r2, r4
 8000650:	4628      	mov	r0, r5
 8000652:	f44f 518a 	mov.w	r1, #4416	; 0x1140
 8000656:	f000 fbf7 	bl	8000e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STEP_Y_GPIO_Port, STEP_Y_Pin, GPIO_PIN_RESET);
 800065a:	4622      	mov	r2, r4
 800065c:	4648      	mov	r0, r9
 800065e:	2104      	movs	r1, #4
 8000660:	f000 fbf2 	bl	8000e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Y_Pin | SPI_CS_X_Pin, GPIO_PIN_SET);
 8000664:	4638      	mov	r0, r7
 8000666:	2201      	movs	r2, #1
 8000668:	2150      	movs	r1, #80	; 0x50
 800066a:	f000 fbed 	bl	8000e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_GPIO_Init+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = B1_Pin;
 8000672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000676:	a905      	add	r1, sp, #20
 8000678:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800067a:	e9cd 2305 	strd	r2, r3, [sp, #20]

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC7 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067e:	f04f 0803 	mov.w	r8, #3
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000682:	f000 fa93 	bl	8000bac <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000686:	a905      	add	r1, sp, #20
 8000688:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11;
 800068a:	f640 439f 	movw	r3, #3231	; 0xc9f
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	e9cd 3805 	strd	r3, r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000694:	f000 fa8a 	bl	8000bac <HAL_GPIO_Init>
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 800069a:	f649 7313 	movw	r3, #40723	; 0x9f13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	4824      	ldr	r0, [pc, #144]	; (8000730 <MX_GPIO_Init+0x16c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 80006a0:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = TMC_EN_Pin | STEP_X_Pin | DIR_X_Pin | DIR_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	e9cd 8406 	strd	r8, r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f000 fa80 	bl	8000bac <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ac:	a905      	add	r1, sp, #20
 80006ae:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = TMC_EN_Pin | STEP_X_Pin | DIR_X_Pin | DIR_Y_Pin;
 80006b0:	f44f 538b 	mov.w	r3, #4448	; 0x1160
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006bc:	f000 fa76 	bl	8000bac <HAL_GPIO_Init>
                           PB12 PB13 PB14 PB15
                           PB5 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	a905      	add	r1, sp, #20
 80006c2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80006c4:	f24f 73a7 	movw	r3, #63399	; 0xf7a7
 80006c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	e9cd 8406 	strd	r8, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f000 fa6d 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIAG0_X_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(DIAG0_X_GPIO_Port, &GPIO_InitStruct);
 80006d2:	4628      	mov	r0, r5
 80006d4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = DIAG0_X_Pin;
 80006d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006dc:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(DIAG0_X_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f000 fa64 	bl	8000bac <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEP_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(STEP_Y_GPIO_Port, &GPIO_InitStruct);
 80006e4:	4648      	mov	r0, r9
 80006e6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = STEP_Y_Pin;
 80006e8:	2304      	movs	r3, #4
 80006ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	e9cd 6406 	strd	r6, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(STEP_Y_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f000 fa5b 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIAG0_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(DIAG0_Y_GPIO_Port, &GPIO_InitStruct);
 80006f6:	a905      	add	r1, sp, #20
 80006f8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = DIAG0_Y_Pin;
 80006fa:	2308      	movs	r3, #8
 80006fc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fe:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(DIAG0_Y_GPIO_Port, &GPIO_InitStruct);
 8000702:	f000 fa53 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CS_Y_Pin | SPI_CS_X_Pin;
 8000706:	2350      	movs	r3, #80	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	a905      	add	r1, sp, #20
 800070a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	e9cd 6406 	strd	r6, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = SPI_CS_Y_Pin | SPI_CS_X_Pin;
 8000712:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f000 fa4a 	bl	8000bac <HAL_GPIO_Init>
}
 8000718:	b00b      	add	sp, #44	; 0x2c
 800071a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40020800 	.word	0x40020800
 8000728:	40020400 	.word	0x40020400
 800072c:	10210000 	.word	0x10210000
 8000730:	40020000 	.word	0x40020000
 8000734:	40020c00 	.word	0x40020c00

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	2400      	movs	r4, #0
{
 800073c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000742:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000746:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800074a:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <SystemClock_Config+0x8c>)
 8000750:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800075e:	6419      	str	r1, [r3, #64]	; 0x40
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800076a:	9402      	str	r4, [sp, #8]
 800076c:	6813      	ldr	r3, [r2, #0]
 800076e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077a:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000782:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000786:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000788:	f44f 71a8 	mov.w	r1, #336	; 0x150
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800078c:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000792:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000794:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000798:	2307      	movs	r3, #7
 800079a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 800079e:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f000 fb6a 	bl	8000e7c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ae:	a803      	add	r0, sp, #12
 80007b0:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ba:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007bc:	f000 fe08 	bl	80013d0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80007c0:	b015      	add	sp, #84	; 0x54
 80007c2:	bd30      	pop	{r4, r5, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <main>:
{
 80007cc:	b508      	push	{r3, lr}
  HAL_Init();
 80007ce:	f000 f945 	bl	8000a5c <HAL_Init>
  SystemClock_Config();
 80007d2:	f7ff ffb1 	bl	8000738 <SystemClock_Config>
  MX_GPIO_Init();
 80007d6:	f7ff fef5 	bl	80005c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007da:	f000 f8a1 	bl	8000920 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007de:	f000 f807 	bl	80007f0 <MX_SPI1_Init>
  App_Main();
 80007e2:	f7ff fe77 	bl	80004d4 <App_Main>
 80007e6:	e7fe      	b.n	80007e6 <main+0x1a>

080007e8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop

080007f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007f0:	b538      	push	{r3, r4, r5, lr}

  hspi1.Instance = SPI1;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_SPI1_Init+0x44>)
 80007f4:	4a10      	ldr	r2, [pc, #64]	; (8000838 <MX_SPI1_Init+0x48>)
 80007f6:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f8:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007fc:	2002      	movs	r0, #2
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007fe:	2201      	movs	r2, #1
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000800:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000804:	2420      	movs	r4, #32
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000806:	6059      	str	r1, [r3, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000808:	6118      	str	r0, [r3, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 800080a:	210a      	movs	r1, #10
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800080c:	615a      	str	r2, [r3, #20]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080e:	4618      	mov	r0, r3
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000810:	2200      	movs	r2, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000812:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000816:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081c:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000822:	f000 ff25 	bl	8001670 <HAL_SPI_Init>
 8000826:	b900      	cbnz	r0, 800082a <MX_SPI1_Init+0x3a>
  {
    Error_Handler();
  }
}
 8000828:	bd38      	pop	{r3, r4, r5, pc}
 800082a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800082e:	f7ff bfdb 	b.w	80007e8 <Error_Handler>
 8000832:	bf00      	nop
 8000834:	200002b4 	.word	0x200002b4
 8000838:	40013000 	.word	0x40013000

0800083c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle)
{
 800083c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (spiHandle->Instance == SPI1)
 800083e:	6801      	ldr	r1, [r0, #0]
 8000840:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <HAL_SPI_MspInit+0x64>)
{
 8000842:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	2300      	movs	r3, #0
  if (spiHandle->Instance == SPI1)
 8000846:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800084c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000850:	9307      	str	r3, [sp, #28]
  if (spiHandle->Instance == SPI1)
 8000852:	d001      	beq.n	8000858 <HAL_SPI_MspInit+0x1c>

    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000854:	b008      	add	sp, #32
 8000856:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000858:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	4810      	ldr	r0, [pc, #64]	; (80008a4 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000862:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000866:	6451      	str	r1, [r2, #68]	; 0x44
 8000868:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800086a:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 800086e:	9101      	str	r1, [sp, #4]
 8000870:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	9302      	str	r3, [sp, #8]
 8000874:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6313      	str	r3, [r2, #48]	; 0x30
 800087c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000886:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800088a:	25e0      	movs	r5, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000894:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f000 f988 	bl	8000bac <HAL_GPIO_Init>
}
 800089c:	b008      	add	sp, #32
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	40013000 	.word	0x40013000
 80008a4:	40020000 	.word	0x40020000

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x34>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	9100      	str	r1, [sp, #0]
 80008b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008b6:	645a      	str	r2, [r3, #68]	; 0x44
 80008b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008be:	9200      	str	r2, [sp, #0]
 80008c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	9101      	str	r1, [sp, #4]
 80008c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008ca:	641a      	str	r2, [r3, #64]	; 0x40
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	b002      	add	sp, #8
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop

080008e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e4:	e7fe      	b.n	80008e4 <HardFault_Handler>
 80008e6:	bf00      	nop

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler>
 80008ea:	bf00      	nop

080008ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ec:	e7fe      	b.n	80008ec <BusFault_Handler>
 80008ee:	bf00      	nop

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler>
 80008f2:	bf00      	nop

080008f4 <SVC_Handler>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <DebugMon_Handler>:
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <PendSV_Handler>:
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop

08000900 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 b8c6 	b.w	8000a90 <HAL_IncTick>

08000904 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <SystemInit+0x18>)
 8000906:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800090a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000916:	6099      	str	r1, [r3, #8]
#endif
}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART2_UART_Init+0x30>)
 8000922:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <MX_USART2_UART_Init+0x34>)
{
 8000924:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000926:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 8000928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800092a:	f44f 4416 	mov.w	r4, #38400	; 0x9600
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	2200      	movs	r2, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000930:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 38400;
 8000932:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000936:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000940:	f001 fb84 	bl	800204c <HAL_UART_Init>
 8000944:	b900      	cbnz	r0, 8000948 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 8000946:	bd10      	pop	{r4, pc}
 8000948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800094c:	f7ff bf4c 	b.w	80007e8 <Error_Handler>
 8000950:	2000030c 	.word	0x2000030c
 8000954:	40004400 	.word	0x40004400

08000958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000958:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 800095a:	6801      	ldr	r1, [r0, #0]
 800095c:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <HAL_UART_MspInit+0x60>)
{
 800095e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART2)
 8000962:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000968:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800096c:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 800096e:	d001      	beq.n	8000974 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000970:	b009      	add	sp, #36	; 0x24
 8000972:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000974:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	480f      	ldr	r0, [pc, #60]	; (80009bc <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800097e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000982:	6411      	str	r1, [r2, #64]	; 0x40
 8000984:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000986:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 800098a:	9101      	str	r1, [sp, #4]
 800098c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
 8000998:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a6:	240c      	movs	r4, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009aa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f000 f8fc 	bl	8000bac <HAL_GPIO_Init>
}
 80009b4:	b009      	add	sp, #36	; 0x24
 80009b6:	bd30      	pop	{r4, r5, pc}
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40020000 	.word	0x40020000

080009c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009c6:	e003      	b.n	80009d0 <LoopCopyDataInit>

080009c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009ce:	3104      	adds	r1, #4

080009d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009d8:	d3f6      	bcc.n	80009c8 <CopyDataInit>
  ldr  r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009dc:	e002      	b.n	80009e4 <LoopFillZerobss>

080009de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009e0:	f842 3b04 	str.w	r3, [r2], #4

080009e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009e8:	d3f9      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ea:	f7ff ff8b 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ee:	f001 ff43 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f2:	f7ff feeb 	bl	80007cc <main>
  bx  lr    
 80009f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80009fc:	08002aa4 	.word	0x08002aa4
  ldr  r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a04:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a08:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a0c:	20000350 	.word	0x20000350

08000a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC_IRQHandler>
	...

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_InitTick+0x3c>)
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_InitTick+0x40>)
 8000a1a:	7812      	ldrb	r2, [r2, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
{
 8000a1e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a24:	fbb0 f0f2 	udiv	r0, r0, r2
 8000a28:	fbb3 f0f0 	udiv	r0, r3, r0
 8000a2c:	f000 f8a4 	bl	8000b78 <HAL_SYSTICK_Config>
 8000a30:	b908      	cbnz	r0, 8000a36 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	2d0f      	cmp	r5, #15
 8000a34:	d901      	bls.n	8000a3a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000a36:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a38:	bd38      	pop	{r3, r4, r5, pc}
 8000a3a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	4629      	mov	r1, r5
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f000 f852 	bl	8000aec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_InitTick+0x44>)
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	601d      	str	r5, [r3, #0]
}
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}
 8000a50:	20000004 	.word	0x20000004
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000008 	.word	0x20000008

08000a5c <HAL_Init>:
{
 8000a5c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_Init+0x30>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a66:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a76:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f81b 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f7ff ffc8 	bl	8000a14 <HAL_InitTick>
  HAL_MspInit();
 8000a84:	f7ff ff10 	bl	80008a8 <HAL_MspInit>
}
 8000a88:	2000      	movs	r0, #0
 8000a8a:	bd08      	pop	{r3, pc}
 8000a8c:	40023c00 	.word	0x40023c00

08000a90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <HAL_IncTick+0x10>)
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <HAL_IncTick+0x14>)
 8000a94:	6811      	ldr	r1, [r2, #0]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	440b      	add	r3, r1
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	2000034c 	.word	0x2000034c
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000aa8:	4b01      	ldr	r3, [pc, #4]	; (8000ab0 <HAL_GetTick+0x8>)
 8000aaa:	6818      	ldr	r0, [r3, #0]
}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	2000034c 	.word	0x2000034c

08000ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000ab4:	1ec3      	subs	r3, r0, #3
 8000ab6:	2b04      	cmp	r3, #4
{
 8000ab8:	b510      	push	{r4, lr}
 8000aba:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000abc:	d903      	bls.n	8000ac6 <HAL_NVIC_SetPriorityGrouping+0x12>
 8000abe:	2192      	movs	r1, #146	; 0x92
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8000ac2:	f7ff fe93 	bl	80007ec <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000ac8:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000ace:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	0224      	lsls	r4, r4, #8
 8000ad2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad6:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 8000ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000ade:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8000ae0:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ae2:	bd10      	pop	{r4, pc}
 8000ae4:	080028f0 	.word	0x080028f0
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000aec:	2a0f      	cmp	r2, #15
{ 
 8000aee:	b570      	push	{r4, r5, r6, lr}
 8000af0:	4616      	mov	r6, r2
 8000af2:	4605      	mov	r5, r0
 8000af4:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000af6:	d834      	bhi.n	8000b62 <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000af8:	2c0f      	cmp	r4, #15
 8000afa:	d82d      	bhi.n	8000b58 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_NVIC_SetPriority+0x80>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	f1c3 0107 	rsb	r1, r3, #7
 8000b08:	2904      	cmp	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0e:	bf28      	it	cs
 8000b10:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	2a06      	cmp	r2, #6
 8000b14:	d917      	bls.n	8000b46 <HAL_NVIC_SetPriority+0x5a>
 8000b16:	3b03      	subs	r3, #3
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b22:	f04f 32ff 	mov.w	r2, #4294967295
 8000b26:	408a      	lsls	r2, r1
 8000b28:	ea24 0202 	bic.w	r2, r4, r2
 8000b2c:	409a      	lsls	r2, r3
 8000b2e:	4332      	orrs	r2, r6
 8000b30:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	db09      	blt.n	8000b4c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8000b3c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8000b40:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b44:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	2600      	movs	r6, #0
 8000b48:	4633      	mov	r3, r6
 8000b4a:	e7ea      	b.n	8000b22 <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_NVIC_SetPriority+0x84>)
 8000b4e:	f005 050f 	and.w	r5, r5, #15
 8000b52:	442b      	add	r3, r5
 8000b54:	761a      	strb	r2, [r3, #24]
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000b58:	21ab      	movs	r1, #171	; 0xab
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <HAL_NVIC_SetPriority+0x88>)
 8000b5c:	f7ff fe46 	bl	80007ec <assert_failed>
 8000b60:	e7cc      	b.n	8000afc <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000b62:	21aa      	movs	r1, #170	; 0xaa
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <HAL_NVIC_SetPriority+0x88>)
 8000b66:	f7ff fe41 	bl	80007ec <assert_failed>
 8000b6a:	e7c5      	b.n	8000af8 <HAL_NVIC_SetPriority+0xc>
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	e000ecfc 	.word	0xe000ecfc
 8000b74:	080028f0 	.word	0x080028f0

08000b78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	3801      	subs	r0, #1
 8000b7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7e:	d20e      	bcs.n	8000b9e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	4c08      	ldr	r4, [pc, #32]	; (8000ba8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	20f0      	movs	r0, #240	; 0xf0
 8000b8a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b90:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b92:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b9c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000bb0:	4b9b      	ldr	r3, [pc, #620]	; (8000e20 <HAL_GPIO_Init+0x274>)
 8000bb2:	4298      	cmp	r0, r3
{
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	4683      	mov	fp, r0
 8000bb8:	468a      	mov	sl, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000bba:	d017      	beq.n	8000bec <HAL_GPIO_Init+0x40>
 8000bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	d013      	beq.n	8000bec <HAL_GPIO_Init+0x40>
 8000bc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bc8:	4298      	cmp	r0, r3
 8000bca:	d00f      	beq.n	8000bec <HAL_GPIO_Init+0x40>
 8000bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	d00b      	beq.n	8000bec <HAL_GPIO_Init+0x40>
 8000bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	d007      	beq.n	8000bec <HAL_GPIO_Init+0x40>
 8000bdc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000be0:	4298      	cmp	r0, r3
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x40>
 8000be4:	21b3      	movs	r1, #179	; 0xb3
 8000be6:	488f      	ldr	r0, [pc, #572]	; (8000e24 <HAL_GPIO_Init+0x278>)
 8000be8:	f7ff fe00 	bl	80007ec <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000bec:	f8da 3000 	ldr.w	r3, [sl]
 8000bf0:	b299      	uxth	r1, r3
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	f000 80b5 	beq.w	8000d62 <HAL_GPIO_Init+0x1b6>
 8000bf8:	0c1b      	lsrs	r3, r3, #16
 8000bfa:	041b      	lsls	r3, r3, #16
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f040 80b0 	bne.w	8000d62 <HAL_GPIO_Init+0x1b6>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000c02:	f8da 3004 	ldr.w	r3, [sl, #4]
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d917      	bls.n	8000c3a <HAL_GPIO_Init+0x8e>
 8000c0a:	f1a3 0111 	sub.w	r1, r3, #17
 8000c0e:	2901      	cmp	r1, #1
 8000c10:	d913      	bls.n	8000c3a <HAL_GPIO_Init+0x8e>
 8000c12:	4885      	ldr	r0, [pc, #532]	; (8000e28 <HAL_GPIO_Init+0x27c>)
 8000c14:	f423 1100 	bic.w	r1, r3, #2097152	; 0x200000
 8000c18:	4281      	cmp	r1, r0
 8000c1a:	d00e      	beq.n	8000c3a <HAL_GPIO_Init+0x8e>
 8000c1c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8000c20:	4283      	cmp	r3, r0
 8000c22:	d00a      	beq.n	8000c3a <HAL_GPIO_Init+0x8e>
 8000c24:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 8000c28:	4281      	cmp	r1, r0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x8e>
 8000c2c:	497f      	ldr	r1, [pc, #508]	; (8000e2c <HAL_GPIO_Init+0x280>)
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_Init+0x8e>
 8000c32:	21b5      	movs	r1, #181	; 0xb5
 8000c34:	487b      	ldr	r0, [pc, #492]	; (8000e24 <HAL_GPIO_Init+0x278>)
 8000c36:	f7ff fdd9 	bl	80007ec <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000c3a:	f8da 3008 	ldr.w	r3, [sl, #8]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	f200 80e4 	bhi.w	8000e0c <HAL_GPIO_Init+0x260>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c44:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8000e44 <HAL_GPIO_Init+0x298>
{
 8000c48:	f04f 0800 	mov.w	r8, #0
 8000c4c:	e005      	b.n	8000c5a <HAL_GPIO_Init+0xae>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4e:	f108 0801 	add.w	r8, r8, #1
 8000c52:	f1b8 0f10 	cmp.w	r8, #16
 8000c56:	f000 8081 	beq.w	8000d5c <HAL_GPIO_Init+0x1b0>
    ioposition = 0x01U << position;
 8000c5a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5c:	f8da 5000 	ldr.w	r5, [sl]
    ioposition = 0x01U << position;
 8000c60:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c64:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000c66:	42ac      	cmp	r4, r5
 8000c68:	d1f1      	bne.n	8000c4e <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c6a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000c6e:	f022 0110 	bic.w	r1, r2, #16
 8000c72:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8000c76:	2603      	movs	r6, #3
 8000c78:	1e4b      	subs	r3, r1, #1
 8000c7a:	40be      	lsls	r6, r7
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	ea6f 0606 	mvn.w	r6, r6
 8000c82:	d973      	bls.n	8000d6c <HAL_GPIO_Init+0x1c0>
      temp = GPIOx->PUPDR;
 8000c84:	f8db 000c 	ldr.w	r0, [fp, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c88:	f8da 3008 	ldr.w	r3, [sl, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c8c:	4030      	ands	r0, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8e:	40bb      	lsls	r3, r7
 8000c90:	4303      	orrs	r3, r0
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c92:	2902      	cmp	r1, #2
      GPIOx->PUPDR = temp;
 8000c94:	f8cb 300c 	str.w	r3, [fp, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c98:	d07f      	beq.n	8000d9a <HAL_GPIO_Init+0x1ee>
      temp = GPIOx->MODER;
 8000c9a:	f8db 1000 	ldr.w	r1, [fp]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9e:	f002 0303 	and.w	r3, r2, #3
 8000ca2:	40bb      	lsls	r3, r7
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca4:	400e      	ands	r6, r1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca6:	4333      	orrs	r3, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ca8:	00d7      	lsls	r7, r2, #3
      GPIOx->MODER = temp;
 8000caa:	f8cb 3000 	str.w	r3, [fp]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cae:	d5ce      	bpl.n	8000c4e <HAL_GPIO_Init+0xa2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb0:	4b5f      	ldr	r3, [pc, #380]	; (8000e30 <HAL_GPIO_Init+0x284>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb2:	4c5b      	ldr	r4, [pc, #364]	; (8000e20 <HAL_GPIO_Init+0x274>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	9101      	str	r1, [sp, #4]
 8000cb8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000cba:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000cbe:	6459      	str	r1, [r3, #68]	; 0x44
 8000cc0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000cc2:	f028 0303 	bic.w	r3, r8, #3
 8000cc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cca:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000cce:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8000cd2:	9101      	str	r1, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd4:	f008 0103 	and.w	r1, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd8:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000cda:	689e      	ldr	r6, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cdc:	0089      	lsls	r1, r1, #2
 8000cde:	200f      	movs	r0, #15
 8000ce0:	4088      	lsls	r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ce2:	45a3      	cmp	fp, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce4:	ea26 0000 	bic.w	r0, r6, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ce8:	d012      	beq.n	8000d10 <HAL_GPIO_Init+0x164>
 8000cea:	45cb      	cmp	fp, r9
 8000cec:	f000 8084 	beq.w	8000df8 <HAL_GPIO_Init+0x24c>
 8000cf0:	4c50      	ldr	r4, [pc, #320]	; (8000e34 <HAL_GPIO_Init+0x288>)
 8000cf2:	45a3      	cmp	fp, r4
 8000cf4:	f000 8085 	beq.w	8000e02 <HAL_GPIO_Init+0x256>
 8000cf8:	4c4f      	ldr	r4, [pc, #316]	; (8000e38 <HAL_GPIO_Init+0x28c>)
 8000cfa:	45a3      	cmp	fp, r4
 8000cfc:	f000 808b 	beq.w	8000e16 <HAL_GPIO_Init+0x26a>
 8000d00:	4c4e      	ldr	r4, [pc, #312]	; (8000e3c <HAL_GPIO_Init+0x290>)
 8000d02:	45a3      	cmp	fp, r4
 8000d04:	bf0c      	ite	eq
 8000d06:	2404      	moveq	r4, #4
 8000d08:	2407      	movne	r4, #7
 8000d0a:	fa04 f101 	lsl.w	r1, r4, r1
 8000d0e:	4308      	orrs	r0, r1
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d10:	494b      	ldr	r1, [pc, #300]	; (8000e40 <HAL_GPIO_Init+0x294>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d12:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 8000d14:	680b      	ldr	r3, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000d16:	484a      	ldr	r0, [pc, #296]	; (8000e40 <HAL_GPIO_Init+0x294>)
        temp &= ~((uint32_t)iocurrent);
 8000d18:	43e9      	mvns	r1, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d1a:	03d6      	lsls	r6, r2, #15
          temp |= iocurrent;
 8000d1c:	bf4c      	ite	mi
 8000d1e:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8000d20:	400b      	andpl	r3, r1
        EXTI->IMR = temp;
 8000d22:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 8000d24:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000d26:	4846      	ldr	r0, [pc, #280]	; (8000e40 <HAL_GPIO_Init+0x294>)
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d28:	0394      	lsls	r4, r2, #14
          temp |= iocurrent;
 8000d2a:	bf4c      	ite	mi
 8000d2c:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8000d2e:	400b      	andpl	r3, r1
        EXTI->EMR = temp;
 8000d30:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d32:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d34:	02d0      	lsls	r0, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000d36:	4842      	ldr	r0, [pc, #264]	; (8000e40 <HAL_GPIO_Init+0x294>)
          temp |= iocurrent;
 8000d38:	bf4c      	ite	mi
 8000d3a:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8000d3c:	400b      	andpl	r3, r1
        EXTI->RTSR = temp;
 8000d3e:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 8000d40:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d42:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8000d44:	bf54      	ite	pl
 8000d46:	ea01 0503 	andpl.w	r5, r1, r3
        {
          temp |= iocurrent;
 8000d4a:	431d      	orrmi	r5, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4c:	f108 0801 	add.w	r8, r8, #1
        }
        EXTI->FTSR = temp;
 8000d50:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <HAL_GPIO_Init+0x294>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 8000d56:	60dd      	str	r5, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d58:	f47f af7f 	bne.w	8000c5a <HAL_GPIO_Init+0xae>
      }
    }
  }
}
 8000d5c:	b003      	add	sp, #12
 8000d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d62:	21b4      	movs	r1, #180	; 0xb4
 8000d64:	482f      	ldr	r0, [pc, #188]	; (8000e24 <HAL_GPIO_Init+0x278>)
 8000d66:	f7ff fd41 	bl	80007ec <assert_failed>
 8000d6a:	e74a      	b.n	8000c02 <HAL_GPIO_Init+0x56>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d6c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d836      	bhi.n	8000de2 <HAL_GPIO_Init+0x236>
        temp = GPIOx->OSPEEDR; 
 8000d74:	f8db 0008 	ldr.w	r0, [fp, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d78:	40bb      	lsls	r3, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7a:	4030      	ands	r0, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7c:	4303      	orrs	r3, r0
        GPIOx->OSPEEDR = temp;
 8000d7e:	f8cb 3008 	str.w	r3, [fp, #8]
        temp = GPIOx->OTYPER;
 8000d82:	f8db 0004 	ldr.w	r0, [fp, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d86:	f3c2 1300 	ubfx	r3, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8a:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d8e:	fa03 f408 	lsl.w	r4, r3, r8
 8000d92:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 8000d94:	f8cb 4004 	str.w	r4, [fp, #4]
 8000d98:	e774      	b.n	8000c84 <HAL_GPIO_Init+0xd8>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000d9a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d919      	bls.n	8000dd6 <HAL_GPIO_Init+0x22a>
 8000da2:	21e0      	movs	r1, #224	; 0xe0
 8000da4:	481f      	ldr	r0, [pc, #124]	; (8000e24 <HAL_GPIO_Init+0x278>)
 8000da6:	f7ff fd21 	bl	80007ec <assert_failed>
 8000daa:	f8da 3010 	ldr.w	r3, [sl, #16]
 8000dae:	f8da 2004 	ldr.w	r2, [sl, #4]
        temp = GPIOx->AFR[position >> 3U];
 8000db2:	ea4f 00d8 	mov.w	r0, r8, lsr #3
 8000db6:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dba:	f008 0107 	and.w	r1, r8, #7
        temp = GPIOx->AFR[position >> 3U];
 8000dbe:	6a04      	ldr	r4, [r0, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc0:	0089      	lsls	r1, r1, #2
 8000dc2:	f04f 0c0f 	mov.w	ip, #15
 8000dc6:	fa0c fc01 	lsl.w	ip, ip, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dca:	408b      	lsls	r3, r1
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dcc:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd0:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3U] = temp;
 8000dd2:	6203      	str	r3, [r0, #32]
 8000dd4:	e761      	b.n	8000c9a <HAL_GPIO_Init+0xee>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000dd6:	f249 71f7 	movw	r1, #38903	; 0x97f7
 8000dda:	40d9      	lsrs	r1, r3
 8000ddc:	07c9      	lsls	r1, r1, #31
 8000dde:	d4e8      	bmi.n	8000db2 <HAL_GPIO_Init+0x206>
 8000de0:	e7df      	b.n	8000da2 <HAL_GPIO_Init+0x1f6>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000de2:	21c8      	movs	r1, #200	; 0xc8
 8000de4:	480f      	ldr	r0, [pc, #60]	; (8000e24 <HAL_GPIO_Init+0x278>)
 8000de6:	f7ff fd01 	bl	80007ec <assert_failed>
 8000dea:	f8da 2004 	ldr.w	r2, [sl, #4]
 8000dee:	f8da 300c 	ldr.w	r3, [sl, #12]
 8000df2:	f022 0110 	bic.w	r1, r2, #16
 8000df6:	e7bd      	b.n	8000d74 <HAL_GPIO_Init+0x1c8>
 8000df8:	2401      	movs	r4, #1
 8000dfa:	fa04 f101 	lsl.w	r1, r4, r1
 8000dfe:	4308      	orrs	r0, r1
 8000e00:	e786      	b.n	8000d10 <HAL_GPIO_Init+0x164>
 8000e02:	2402      	movs	r4, #2
 8000e04:	fa04 f101 	lsl.w	r1, r4, r1
 8000e08:	4308      	orrs	r0, r1
 8000e0a:	e781      	b.n	8000d10 <HAL_GPIO_Init+0x164>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000e0c:	21b6      	movs	r1, #182	; 0xb6
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <HAL_GPIO_Init+0x278>)
 8000e10:	f7ff fcec 	bl	80007ec <assert_failed>
 8000e14:	e716      	b.n	8000c44 <HAL_GPIO_Init+0x98>
 8000e16:	2403      	movs	r4, #3
 8000e18:	fa04 f101 	lsl.w	r1, r4, r1
 8000e1c:	4308      	orrs	r0, r1
 8000e1e:	e777      	b.n	8000d10 <HAL_GPIO_Init+0x164>
 8000e20:	40020000 	.word	0x40020000
 8000e24:	0800292c 	.word	0x0800292c
 8000e28:	10110000 	.word	0x10110000
 8000e2c:	10220000 	.word	0x10220000
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40013c00 	.word	0x40013c00
 8000e44:	40020400 	.word	0x40020400

08000e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	4606      	mov	r6, r0
 8000e4c:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000e4e:	460c      	mov	r4, r1
 8000e50:	b161      	cbz	r1, 8000e6c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000e52:	2d01      	cmp	r5, #1
 8000e54:	d803      	bhi.n	8000e5e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8000e56:	b905      	cbnz	r5, 8000e5a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e58:	0424      	lsls	r4, r4, #16
 8000e5a:	61b4      	str	r4, [r6, #24]
  }
}
 8000e5c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000e5e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_GPIO_WritePin+0x30>)
 8000e64:	f7ff fcc2 	bl	80007ec <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e68:	61b4      	str	r4, [r6, #24]
}
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000e6c:	f240 119f 	movw	r1, #415	; 0x19f
 8000e70:	4801      	ldr	r0, [pc, #4]	; (8000e78 <HAL_GPIO_WritePin+0x30>)
 8000e72:	f7ff fcbb 	bl	80007ec <assert_failed>
 8000e76:	e7ec      	b.n	8000e52 <HAL_GPIO_WritePin+0xa>
 8000e78:	0800292c 	.word	0x0800292c

08000e7c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	f000 81d2 	beq.w	8001226 <HAL_RCC_OscConfig+0x3aa>
{
 8000e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000e86:	6803      	ldr	r3, [r0, #0]
 8000e88:	2b0f      	cmp	r3, #15
{
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000e8e:	f200 8138 	bhi.w	8001102 <HAL_RCC_OscConfig+0x286>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e92:	07dd      	lsls	r5, r3, #31
 8000e94:	d53a      	bpl.n	8000f0c <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000e96:	6863      	ldr	r3, [r4, #4]
 8000e98:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8000e9c:	d006      	beq.n	8000eac <HAL_RCC_OscConfig+0x30>
 8000e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea2:	d003      	beq.n	8000eac <HAL_RCC_OscConfig+0x30>
 8000ea4:	21ed      	movs	r1, #237	; 0xed
 8000ea6:	48b2      	ldr	r0, [pc, #712]	; (8001170 <HAL_RCC_OscConfig+0x2f4>)
 8000ea8:	f7ff fca0 	bl	80007ec <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eac:	4ab1      	ldr	r2, [pc, #708]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
 8000eae:	6893      	ldr	r3, [r2, #8]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	f000 8175 	beq.w	80011a4 <HAL_RCC_OscConfig+0x328>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eba:	6893      	ldr	r3, [r2, #8]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	f000 816b 	beq.w	800119c <HAL_RCC_OscConfig+0x320>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec6:	6863      	ldr	r3, [r4, #4]
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ecc:	f000 8174 	beq.w	80011b8 <HAL_RCC_OscConfig+0x33c>
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed4:	f000 8217 	beq.w	8001306 <HAL_RCC_OscConfig+0x48a>
 8000ed8:	4da6      	ldr	r5, [pc, #664]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
 8000eda:	682a      	ldr	r2, [r5, #0]
 8000edc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ee0:	602a      	str	r2, [r5, #0]
 8000ee2:	682a      	ldr	r2, [r5, #0]
 8000ee4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ee8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f040 8169 	bne.w	80011c2 <HAL_RCC_OscConfig+0x346>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fdda 	bl	8000aa8 <HAL_GetTick>
 8000ef4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef6:	e005      	b.n	8000f04 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef8:	f7ff fdd6 	bl	8000aa8 <HAL_GetTick>
 8000efc:	1b80      	subs	r0, r0, r6
 8000efe:	2864      	cmp	r0, #100	; 0x64
 8000f00:	f200 817d 	bhi.w	80011fe <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f04:	682b      	ldr	r3, [r5, #0]
 8000f06:	039b      	lsls	r3, r3, #14
 8000f08:	d4f6      	bmi.n	8000ef8 <HAL_RCC_OscConfig+0x7c>
 8000f0a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0c:	079f      	lsls	r7, r3, #30
 8000f0e:	f100 80c9 	bmi.w	80010a4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f12:	071a      	lsls	r2, r3, #28
 8000f14:	d518      	bpl.n	8000f48 <HAL_RCC_OscConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000f16:	6963      	ldr	r3, [r4, #20]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	f200 811f 	bhi.w	800115c <HAL_RCC_OscConfig+0x2e0>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 810c 	beq.w	800113c <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f24:	4b94      	ldr	r3, [pc, #592]	; (8001178 <HAL_RCC_OscConfig+0x2fc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f26:	4d93      	ldr	r5, [pc, #588]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_ENABLE();
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fdbc 	bl	8000aa8 <HAL_GetTick>
 8000f30:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f32:	e005      	b.n	8000f40 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f34:	f7ff fdb8 	bl	8000aa8 <HAL_GetTick>
 8000f38:	1b80      	subs	r0, r0, r6
 8000f3a:	2802      	cmp	r0, #2
 8000f3c:	f200 815f 	bhi.w	80011fe <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f40:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f42:	079b      	lsls	r3, r3, #30
 8000f44:	d5f6      	bpl.n	8000f34 <HAL_RCC_OscConfig+0xb8>
 8000f46:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f48:	075d      	lsls	r5, r3, #29
 8000f4a:	d545      	bpl.n	8000fd8 <HAL_RCC_OscConfig+0x15c>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000f4c:	68a3      	ldr	r3, [r4, #8]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d906      	bls.n	8000f60 <HAL_RCC_OscConfig+0xe4>
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d004      	beq.n	8000f60 <HAL_RCC_OscConfig+0xe4>
 8000f56:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8000f5a:	4885      	ldr	r0, [pc, #532]	; (8001170 <HAL_RCC_OscConfig+0x2f4>)
 8000f5c:	f7ff fc46 	bl	80007ec <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f60:	4a84      	ldr	r2, [pc, #528]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
 8000f62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f64:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8000f68:	f040 815f 	bne.w	800122a <HAL_RCC_OscConfig+0x3ae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f80:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f82:	4d7e      	ldr	r5, [pc, #504]	; (800117c <HAL_RCC_OscConfig+0x300>)
 8000f84:	682a      	ldr	r2, [r5, #0]
 8000f86:	05d0      	lsls	r0, r2, #23
 8000f88:	f140 8129 	bpl.w	80011de <HAL_RCC_OscConfig+0x362>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8c:	68a3      	ldr	r3, [r4, #8]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	f000 814d 	beq.w	800122e <HAL_RCC_OscConfig+0x3b2>
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	f000 81c0 	beq.w	800131a <HAL_RCC_OscConfig+0x49e>
 8000f9a:	4d76      	ldr	r5, [pc, #472]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
 8000f9c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
 8000fa2:	672a      	str	r2, [r5, #112]	; 0x70
 8000fa4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000fa6:	f022 0204 	bic.w	r2, r2, #4
 8000faa:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f040 8143 	bne.w	8001238 <HAL_RCC_OscConfig+0x3bc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb2:	f7ff fd79 	bl	8000aa8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fba:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbc:	e006      	b.n	8000fcc <HAL_RCC_OscConfig+0x150>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fd73 	bl	8000aa8 <HAL_GetTick>
 8000fc2:	eba0 0008 	sub.w	r0, r0, r8
 8000fc6:	42b8      	cmp	r0, r7
 8000fc8:	f200 8119 	bhi.w	80011fe <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fcc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000fce:	079b      	lsls	r3, r3, #30
 8000fd0:	d4f5      	bmi.n	8000fbe <HAL_RCC_OscConfig+0x142>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fd2:	2e00      	cmp	r6, #0
 8000fd4:	f040 8166 	bne.w	80012a4 <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8000fd8:	69a0      	ldr	r0, [r4, #24]
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	f200 80d4 	bhi.w	8001188 <HAL_RCC_OscConfig+0x30c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	d05b      	beq.n	800109c <HAL_RCC_OscConfig+0x220>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fe4:	4b63      	ldr	r3, [pc, #396]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	f002 020c 	and.w	r2, r2, #12
 8000fec:	2a08      	cmp	r2, #8
 8000fee:	f000 815f 	beq.w	80012b0 <HAL_RCC_OscConfig+0x434>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ff2:	2802      	cmp	r0, #2
 8000ff4:	f040 8145 	bne.w	8001282 <HAL_RCC_OscConfig+0x406>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8000ff8:	69e3      	ldr	r3, [r4, #28]
 8000ffa:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8000ffe:	d004      	beq.n	800100a <HAL_RCC_OscConfig+0x18e>
 8001000:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001004:	485a      	ldr	r0, [pc, #360]	; (8001170 <HAL_RCC_OscConfig+0x2f4>)
 8001006:	f7ff fbf1 	bl	80007ec <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800100a:	6a23      	ldr	r3, [r4, #32]
 800100c:	2b3f      	cmp	r3, #63	; 0x3f
 800100e:	f200 819a 	bhi.w	8001346 <HAL_RCC_OscConfig+0x4ca>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001014:	3b32      	subs	r3, #50	; 0x32
 8001016:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800101a:	f200 818e 	bhi.w	800133a <HAL_RCC_OscConfig+0x4be>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800101e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001020:	2a08      	cmp	r2, #8
 8001022:	f240 8169 	bls.w	80012f8 <HAL_RCC_OscConfig+0x47c>
 8001026:	f240 11db 	movw	r1, #475	; 0x1db
 800102a:	4851      	ldr	r0, [pc, #324]	; (8001170 <HAL_RCC_OscConfig+0x2f4>)
 800102c:	f7ff fbde 	bl	80007ec <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001030:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001032:	3b02      	subs	r3, #2
 8001034:	2b0d      	cmp	r3, #13
 8001036:	f200 817a 	bhi.w	800132e <HAL_RCC_OscConfig+0x4b2>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103a:	4b51      	ldr	r3, [pc, #324]	; (8001180 <HAL_RCC_OscConfig+0x304>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800103c:	4d4d      	ldr	r5, [pc, #308]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_PLL_DISABLE();
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001042:	f7ff fd31 	bl	8000aa8 <HAL_GetTick>
 8001046:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001048:	e005      	b.n	8001056 <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104a:	f7ff fd2d 	bl	8000aa8 <HAL_GetTick>
 800104e:	1b80      	subs	r0, r0, r6
 8001050:	2802      	cmp	r0, #2
 8001052:	f200 80d4 	bhi.w	80011fe <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001056:	682b      	ldr	r3, [r5, #0]
 8001058:	0199      	lsls	r1, r3, #6
 800105a:	d4f6      	bmi.n	800104a <HAL_RCC_OscConfig+0x1ce>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800105c:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001060:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001064:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001066:	4c43      	ldr	r4, [pc, #268]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001068:	4333      	orrs	r3, r6
 800106a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800106e:	0852      	lsrs	r2, r2, #1
 8001070:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001074:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001076:	4942      	ldr	r1, [pc, #264]	; (8001180 <HAL_RCC_OscConfig+0x304>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800107c:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800107e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001080:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001082:	f7ff fd11 	bl	8000aa8 <HAL_GetTick>
 8001086:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001088:	e005      	b.n	8001096 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108a:	f7ff fd0d 	bl	8000aa8 <HAL_GetTick>
 800108e:	1b40      	subs	r0, r0, r5
 8001090:	2802      	cmp	r0, #2
 8001092:	f200 80b4 	bhi.w	80011fe <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	019a      	lsls	r2, r3, #6
 800109a:	d5f6      	bpl.n	800108a <HAL_RCC_OscConfig+0x20e>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800109c:	2000      	movs	r0, #0
}
 800109e:	b002      	add	sp, #8
 80010a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80010a4:	68e3      	ldr	r3, [r4, #12]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d842      	bhi.n	8001130 <HAL_RCC_OscConfig+0x2b4>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80010aa:	6923      	ldr	r3, [r4, #16]
 80010ac:	2b1f      	cmp	r3, #31
 80010ae:	f200 80b4 	bhi.w	800121a <HAL_RCC_OscConfig+0x39e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	f012 0f0c 	tst.w	r2, #12
 80010ba:	d02e      	beq.n	800111a <HAL_RCC_OscConfig+0x29e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010c2:	2a08      	cmp	r2, #8
 80010c4:	d026      	beq.n	8001114 <HAL_RCC_OscConfig+0x298>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010c6:	68e3      	ldr	r3, [r4, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80c9 	beq.w	8001260 <HAL_RCC_OscConfig+0x3e4>
        __HAL_RCC_HSI_ENABLE();
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	4d28      	ldr	r5, [pc, #160]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_HSI_ENABLE();
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010d6:	f7ff fce7 	bl	8000aa8 <HAL_GetTick>
 80010da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	e005      	b.n	80010ea <HAL_RCC_OscConfig+0x26e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff fce3 	bl	8000aa8 <HAL_GetTick>
 80010e2:	1b80      	subs	r0, r0, r6
 80010e4:	2802      	cmp	r0, #2
 80010e6:	f200 808a 	bhi.w	80011fe <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	0798      	lsls	r0, r3, #30
 80010ee:	d5f6      	bpl.n	80010de <HAL_RCC_OscConfig+0x262>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	6922      	ldr	r2, [r4, #16]
 80010f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010fc:	602b      	str	r3, [r5, #0]
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	e707      	b.n	8000f12 <HAL_RCC_OscConfig+0x96>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001102:	21e8      	movs	r1, #232	; 0xe8
 8001104:	481a      	ldr	r0, [pc, #104]	; (8001170 <HAL_RCC_OscConfig+0x2f4>)
 8001106:	f7ff fb71 	bl	80007ec <assert_failed>
 800110a:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110c:	07dd      	lsls	r5, r3, #31
 800110e:	f57f aefd 	bpl.w	8000f0c <HAL_RCC_OscConfig+0x90>
 8001112:	e6c0      	b.n	8000e96 <HAL_RCC_OscConfig+0x1a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	025e      	lsls	r6, r3, #9
 8001118:	d4d5      	bmi.n	80010c6 <HAL_RCC_OscConfig+0x24a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	079d      	lsls	r5, r3, #30
 8001120:	d571      	bpl.n	8001206 <HAL_RCC_OscConfig+0x38a>
 8001122:	68e3      	ldr	r3, [r4, #12]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d06e      	beq.n	8001206 <HAL_RCC_OscConfig+0x38a>
        return HAL_ERROR;
 8001128:	2001      	movs	r0, #1
}
 800112a:	b002      	add	sp, #8
 800112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001130:	f240 111f 	movw	r1, #287	; 0x11f
 8001134:	480e      	ldr	r0, [pc, #56]	; (8001170 <HAL_RCC_OscConfig+0x2f4>)
 8001136:	f7ff fb59 	bl	80007ec <assert_failed>
 800113a:	e7b6      	b.n	80010aa <HAL_RCC_OscConfig+0x22e>
      __HAL_RCC_LSI_DISABLE();
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113e:	4d0d      	ldr	r5, [pc, #52]	; (8001174 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_DISABLE();
 8001140:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001142:	f7ff fcb1 	bl	8000aa8 <HAL_GetTick>
 8001146:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001148:	e004      	b.n	8001154 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114a:	f7ff fcad 	bl	8000aa8 <HAL_GetTick>
 800114e:	1b80      	subs	r0, r0, r6
 8001150:	2802      	cmp	r0, #2
 8001152:	d854      	bhi.n	80011fe <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001154:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001156:	079f      	lsls	r7, r3, #30
 8001158:	d4f7      	bmi.n	800114a <HAL_RCC_OscConfig+0x2ce>
 800115a:	e6f4      	b.n	8000f46 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800115c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <HAL_RCC_OscConfig+0x2f4>)
 8001162:	f7ff fb43 	bl	80007ec <assert_failed>
 8001166:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0e7      	beq.n	800113c <HAL_RCC_OscConfig+0x2c0>
 800116c:	e6da      	b.n	8000f24 <HAL_RCC_OscConfig+0xa8>
 800116e:	bf00      	nop
 8001170:	08002968 	.word	0x08002968
 8001174:	40023800 	.word	0x40023800
 8001178:	42470e80 	.word	0x42470e80
 800117c:	40007000 	.word	0x40007000
 8001180:	42470060 	.word	0x42470060
 8001184:	42470000 	.word	0x42470000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001188:	4872      	ldr	r0, [pc, #456]	; (8001354 <HAL_RCC_OscConfig+0x4d8>)
 800118a:	f240 11cf 	movw	r1, #463	; 0x1cf
 800118e:	f7ff fb2d 	bl	80007ec <assert_failed>
 8001192:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001194:	2800      	cmp	r0, #0
 8001196:	f47f af25 	bne.w	8000fe4 <HAL_RCC_OscConfig+0x168>
 800119a:	e77f      	b.n	800109c <HAL_RCC_OscConfig+0x220>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119c:	6853      	ldr	r3, [r2, #4]
 800119e:	0258      	lsls	r0, r3, #9
 80011a0:	f57f ae91 	bpl.w	8000ec6 <HAL_RCC_OscConfig+0x4a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b6c      	ldr	r3, [pc, #432]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	0399      	lsls	r1, r3, #14
 80011aa:	f57f aeae 	bpl.w	8000f0a <HAL_RCC_OscConfig+0x8e>
 80011ae:	6863      	ldr	r3, [r4, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f47f aeaa 	bne.w	8000f0a <HAL_RCC_OscConfig+0x8e>
 80011b6:	e7b7      	b.n	8001128 <HAL_RCC_OscConfig+0x2ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b8:	4a67      	ldr	r2, [pc, #412]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011c2:	f7ff fc71 	bl	8000aa8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4d64      	ldr	r5, [pc, #400]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
        tickstart = HAL_GetTick();
 80011c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	e004      	b.n	80011d6 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fc6c 	bl	8000aa8 <HAL_GetTick>
 80011d0:	1b80      	subs	r0, r0, r6
 80011d2:	2864      	cmp	r0, #100	; 0x64
 80011d4:	d813      	bhi.n	80011fe <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	039a      	lsls	r2, r3, #14
 80011da:	d5f7      	bpl.n	80011cc <HAL_RCC_OscConfig+0x350>
 80011dc:	e695      	b.n	8000f0a <HAL_RCC_OscConfig+0x8e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011de:	682a      	ldr	r2, [r5, #0]
 80011e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011e4:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 80011e6:	f7ff fc5f 	bl	8000aa8 <HAL_GetTick>
 80011ea:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	05d9      	lsls	r1, r3, #23
 80011f0:	f53f aecc 	bmi.w	8000f8c <HAL_RCC_OscConfig+0x110>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f4:	f7ff fc58 	bl	8000aa8 <HAL_GetTick>
 80011f8:	1bc0      	subs	r0, r0, r7
 80011fa:	2802      	cmp	r0, #2
 80011fc:	d9f6      	bls.n	80011ec <HAL_RCC_OscConfig+0x370>
            return HAL_TIMEOUT;
 80011fe:	2003      	movs	r0, #3
}
 8001200:	b002      	add	sp, #8
 8001202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001206:	4a54      	ldr	r2, [pc, #336]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
 8001208:	6921      	ldr	r1, [r4, #16]
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001210:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001218:	e67b      	b.n	8000f12 <HAL_RCC_OscConfig+0x96>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800121a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800121e:	484d      	ldr	r0, [pc, #308]	; (8001354 <HAL_RCC_OscConfig+0x4d8>)
 8001220:	f7ff fae4 	bl	80007ec <assert_failed>
 8001224:	e745      	b.n	80010b2 <HAL_RCC_OscConfig+0x236>
    return HAL_ERROR;
 8001226:	2001      	movs	r0, #1
}
 8001228:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800122a:	2600      	movs	r6, #0
 800122c:	e6a9      	b.n	8000f82 <HAL_RCC_OscConfig+0x106>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122e:	4a4a      	ldr	r2, [pc, #296]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
 8001230:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001238:	f7ff fc36 	bl	8000aa8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	4d46      	ldr	r5, [pc, #280]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
      tickstart = HAL_GetTick();
 800123e:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001240:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001244:	e005      	b.n	8001252 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fc2f 	bl	8000aa8 <HAL_GetTick>
 800124a:	eba0 0008 	sub.w	r0, r0, r8
 800124e:	42b8      	cmp	r0, r7
 8001250:	d8d5      	bhi.n	80011fe <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001252:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001254:	079a      	lsls	r2, r3, #30
 8001256:	d5f6      	bpl.n	8001246 <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 8001258:	2e00      	cmp	r6, #0
 800125a:	f43f aebd 	beq.w	8000fd8 <HAL_RCC_OscConfig+0x15c>
 800125e:	e021      	b.n	80012a4 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_HSI_DISABLE();
 8001260:	4a3e      	ldr	r2, [pc, #248]	; (800135c <HAL_RCC_OscConfig+0x4e0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	4d3d      	ldr	r5, [pc, #244]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
        __HAL_RCC_HSI_DISABLE();
 8001264:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001266:	f7ff fc1f 	bl	8000aa8 <HAL_GetTick>
 800126a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126c:	e004      	b.n	8001278 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fc1b 	bl	8000aa8 <HAL_GetTick>
 8001272:	1b80      	subs	r0, r0, r6
 8001274:	2802      	cmp	r0, #2
 8001276:	d8c2      	bhi.n	80011fe <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	0799      	lsls	r1, r3, #30
 800127c:	d4f7      	bmi.n	800126e <HAL_RCC_OscConfig+0x3f2>
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	e647      	b.n	8000f12 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PLL_DISABLE();
 8001282:	4a37      	ldr	r2, [pc, #220]	; (8001360 <HAL_RCC_OscConfig+0x4e4>)
 8001284:	2100      	movs	r1, #0
 8001286:	6011      	str	r1, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001288:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 800128a:	f7ff fc0d 	bl	8000aa8 <HAL_GetTick>
 800128e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001290:	e004      	b.n	800129c <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff fc09 	bl	8000aa8 <HAL_GetTick>
 8001296:	1b40      	subs	r0, r0, r5
 8001298:	2802      	cmp	r0, #2
 800129a:	d8b0      	bhi.n	80011fe <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	019b      	lsls	r3, r3, #6
 80012a0:	d4f7      	bmi.n	8001292 <HAL_RCC_OscConfig+0x416>
 80012a2:	e6fb      	b.n	800109c <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a4:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
 80012a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	e693      	b.n	8000fd8 <HAL_RCC_OscConfig+0x15c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012b0:	2801      	cmp	r0, #1
 80012b2:	f43f af3a 	beq.w	800112a <HAL_RCC_OscConfig+0x2ae>
        pll_config = RCC->PLLCFGR;
 80012b6:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b8:	69e2      	ldr	r2, [r4, #28]
 80012ba:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80012be:	4291      	cmp	r1, r2
 80012c0:	f47f af32 	bne.w	8001128 <HAL_RCC_OscConfig+0x2ac>
 80012c4:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012c6:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ca:	4291      	cmp	r1, r2
 80012cc:	f47f af2c 	bne.w	8001128 <HAL_RCC_OscConfig+0x2ac>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80012d0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80012d6:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012d8:	428a      	cmp	r2, r1
 80012da:	f47f af25 	bne.w	8001128 <HAL_RCC_OscConfig+0x2ac>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80012de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012e0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80012e4:	4291      	cmp	r1, r2
 80012e6:	f47f af1f 	bne.w	8001128 <HAL_RCC_OscConfig+0x2ac>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80012ec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 80012f0:	1a18      	subs	r0, r3, r0
 80012f2:	bf18      	it	ne
 80012f4:	2001      	movne	r0, #1
 80012f6:	e718      	b.n	800112a <HAL_RCC_OscConfig+0x2ae>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80012f8:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80012fc:	40d3      	lsrs	r3, r2
 80012fe:	07d8      	lsls	r0, r3, #31
 8001300:	f53f ae96 	bmi.w	8001030 <HAL_RCC_OscConfig+0x1b4>
 8001304:	e68f      	b.n	8001026 <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e753      	b.n	80011c2 <HAL_RCC_OscConfig+0x346>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_RCC_OscConfig+0x4dc>)
 800131c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800131e:	f042 0204 	orr.w	r2, r2, #4
 8001322:	671a      	str	r2, [r3, #112]	; 0x70
 8001324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	671a      	str	r2, [r3, #112]	; 0x70
 800132c:	e784      	b.n	8001238 <HAL_RCC_OscConfig+0x3bc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800132e:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <HAL_RCC_OscConfig+0x4d8>)
 8001334:	f7ff fa5a 	bl	80007ec <assert_failed>
 8001338:	e67f      	b.n	800103a <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800133a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_RCC_OscConfig+0x4d8>)
 8001340:	f7ff fa54 	bl	80007ec <assert_failed>
 8001344:	e66b      	b.n	800101e <HAL_RCC_OscConfig+0x1a2>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001346:	f240 11d9 	movw	r1, #473	; 0x1d9
 800134a:	4802      	ldr	r0, [pc, #8]	; (8001354 <HAL_RCC_OscConfig+0x4d8>)
 800134c:	f7ff fa4e 	bl	80007ec <assert_failed>
 8001350:	e65f      	b.n	8001012 <HAL_RCC_OscConfig+0x196>
 8001352:	bf00      	nop
 8001354:	08002968 	.word	0x08002968
 8001358:	40023800 	.word	0x40023800
 800135c:	42470000 	.word	0x42470000
 8001360:	42470060 	.word	0x42470060

08001364 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001364:	4917      	ldr	r1, [pc, #92]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001366:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001368:	688b      	ldr	r3, [r1, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b04      	cmp	r3, #4
 8001370:	d01b      	beq.n	80013aa <HAL_RCC_GetSysClockFreq+0x46>
 8001372:	2b08      	cmp	r3, #8
 8001374:	d117      	bne.n	80013a6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001376:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001378:	684b      	ldr	r3, [r1, #4]
 800137a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800137e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001382:	d114      	bne.n	80013ae <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001384:	6849      	ldr	r1, [r1, #4]
 8001386:	4810      	ldr	r0, [pc, #64]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001388:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800138c:	fba1 0100 	umull	r0, r1, r1, r0
 8001390:	f7fe ff20 	bl	80001d4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800139c:	3301      	adds	r3, #1
 800139e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80013a0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013a4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80013a8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80013aa:	4808      	ldr	r0, [pc, #32]	; (80013cc <HAL_RCC_GetSysClockFreq+0x68>)
}
 80013ac:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ae:	684b      	ldr	r3, [r1, #4]
 80013b0:	4806      	ldr	r0, [pc, #24]	; (80013cc <HAL_RCC_GetSysClockFreq+0x68>)
 80013b2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80013b6:	fba3 0100 	umull	r0, r1, r3, r0
 80013ba:	2300      	movs	r3, #0
 80013bc:	f7fe ff0a 	bl	80001d4 <__aeabi_uldivmod>
 80013c0:	e7e8      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0x30>
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	00f42400 	.word	0x00f42400
 80013cc:	007a1200 	.word	0x007a1200

080013d0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80013d0:	2800      	cmp	r0, #0
 80013d2:	f000 80f1 	beq.w	80015b8 <HAL_RCC_ClockConfig+0x1e8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80013d6:	6803      	ldr	r3, [r0, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	2b0e      	cmp	r3, #14
{
 80013dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80013e4:	f200 80d2 	bhi.w	800158c <HAL_RCC_ClockConfig+0x1bc>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80013e8:	2d07      	cmp	r5, #7
 80013ea:	f200 80c2 	bhi.w	8001572 <HAL_RCC_ClockConfig+0x1a2>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013ee:	4a76      	ldr	r2, [pc, #472]	; (80015c8 <HAL_RCC_ClockConfig+0x1f8>)
 80013f0:	6813      	ldr	r3, [r2, #0]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	42ab      	cmp	r3, r5
 80013f8:	d209      	bcs.n	800140e <HAL_RCC_ClockConfig+0x3e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	b2eb      	uxtb	r3, r5
 80013fc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	42ab      	cmp	r3, r5
 8001406:	d002      	beq.n	800140e <HAL_RCC_ClockConfig+0x3e>
    return HAL_ERROR;
 8001408:	2001      	movs	r0, #1
}
 800140a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	0798      	lsls	r0, r3, #30
 8001412:	d52c      	bpl.n	800146e <HAL_RCC_ClockConfig+0x9e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001414:	0759      	lsls	r1, r3, #29
 8001416:	d504      	bpl.n	8001422 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001418:	496c      	ldr	r1, [pc, #432]	; (80015cc <HAL_RCC_ClockConfig+0x1fc>)
 800141a:	688a      	ldr	r2, [r1, #8]
 800141c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001420:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001422:	071a      	lsls	r2, r3, #28
 8001424:	d504      	bpl.n	8001430 <HAL_RCC_ClockConfig+0x60>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001426:	4969      	ldr	r1, [pc, #420]	; (80015cc <HAL_RCC_ClockConfig+0x1fc>)
 8001428:	688a      	ldr	r2, [r1, #8]
 800142a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800142e:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001430:	68a1      	ldr	r1, [r4, #8]
 8001432:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8001436:	d014      	beq.n	8001462 <HAL_RCC_ClockConfig+0x92>
 8001438:	f021 0220 	bic.w	r2, r1, #32
 800143c:	2a90      	cmp	r2, #144	; 0x90
 800143e:	d010      	beq.n	8001462 <HAL_RCC_ClockConfig+0x92>
 8001440:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8001444:	2aa0      	cmp	r2, #160	; 0xa0
 8001446:	d00c      	beq.n	8001462 <HAL_RCC_ClockConfig+0x92>
 8001448:	f021 0210 	bic.w	r2, r1, #16
 800144c:	2ac0      	cmp	r2, #192	; 0xc0
 800144e:	d008      	beq.n	8001462 <HAL_RCC_ClockConfig+0x92>
 8001450:	29f0      	cmp	r1, #240	; 0xf0
 8001452:	d006      	beq.n	8001462 <HAL_RCC_ClockConfig+0x92>
 8001454:	f240 2175 	movw	r1, #629	; 0x275
 8001458:	485d      	ldr	r0, [pc, #372]	; (80015d0 <HAL_RCC_ClockConfig+0x200>)
 800145a:	f7ff f9c7 	bl	80007ec <assert_failed>
 800145e:	68a1      	ldr	r1, [r4, #8]
 8001460:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001462:	485a      	ldr	r0, [pc, #360]	; (80015cc <HAL_RCC_ClockConfig+0x1fc>)
 8001464:	6882      	ldr	r2, [r0, #8]
 8001466:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800146a:	430a      	orrs	r2, r1
 800146c:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146e:	07df      	lsls	r7, r3, #31
 8001470:	d528      	bpl.n	80014c4 <HAL_RCC_ClockConfig+0xf4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001472:	6863      	ldr	r3, [r4, #4]
 8001474:	2b03      	cmp	r3, #3
 8001476:	f200 8098 	bhi.w	80015aa <HAL_RCC_ClockConfig+0x1da>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	2b01      	cmp	r3, #1
 800147c:	f000 808f 	beq.w	800159e <HAL_RCC_ClockConfig+0x1ce>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001480:	1e9a      	subs	r2, r3, #2
 8001482:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001484:	4a51      	ldr	r2, [pc, #324]	; (80015cc <HAL_RCC_ClockConfig+0x1fc>)
 8001486:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001488:	f240 809a 	bls.w	80015c0 <HAL_RCC_ClockConfig+0x1f0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	0791      	lsls	r1, r2, #30
 800148e:	d5bb      	bpl.n	8001408 <HAL_RCC_ClockConfig+0x38>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001490:	4e4e      	ldr	r6, [pc, #312]	; (80015cc <HAL_RCC_ClockConfig+0x1fc>)
 8001492:	68b2      	ldr	r2, [r6, #8]
 8001494:	f022 0203 	bic.w	r2, r2, #3
 8001498:	4313      	orrs	r3, r2
 800149a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800149c:	f7ff fb04 	bl	8000aa8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014a4:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	e006      	b.n	80014b6 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a8:	f7ff fafe 	bl	8000aa8 <HAL_GetTick>
 80014ac:	eba0 0008 	sub.w	r0, r0, r8
 80014b0:	42b8      	cmp	r0, r7
 80014b2:	f200 8083 	bhi.w	80015bc <HAL_RCC_ClockConfig+0x1ec>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	68b3      	ldr	r3, [r6, #8]
 80014b8:	6862      	ldr	r2, [r4, #4]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014c2:	d1f1      	bne.n	80014a8 <HAL_RCC_ClockConfig+0xd8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014c4:	4a40      	ldr	r2, [pc, #256]	; (80015c8 <HAL_RCC_ClockConfig+0x1f8>)
 80014c6:	6813      	ldr	r3, [r2, #0]
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	42ab      	cmp	r3, r5
 80014ce:	d906      	bls.n	80014de <HAL_RCC_ClockConfig+0x10e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d0:	b2eb      	uxtb	r3, r5
 80014d2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	42ab      	cmp	r3, r5
 80014dc:	d194      	bne.n	8001408 <HAL_RCC_ClockConfig+0x38>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	075a      	lsls	r2, r3, #29
 80014e2:	d518      	bpl.n	8001516 <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80014e4:	68e1      	ldr	r1, [r4, #12]
 80014e6:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 80014ea:	d00e      	beq.n	800150a <HAL_RCC_ClockConfig+0x13a>
 80014ec:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 80014f0:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80014f4:	d009      	beq.n	800150a <HAL_RCC_ClockConfig+0x13a>
 80014f6:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 80014fa:	d006      	beq.n	800150a <HAL_RCC_ClockConfig+0x13a>
 80014fc:	f240 21ba 	movw	r1, #698	; 0x2ba
 8001500:	4833      	ldr	r0, [pc, #204]	; (80015d0 <HAL_RCC_ClockConfig+0x200>)
 8001502:	f7ff f973 	bl	80007ec <assert_failed>
 8001506:	68e1      	ldr	r1, [r4, #12]
 8001508:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800150a:	4830      	ldr	r0, [pc, #192]	; (80015cc <HAL_RCC_ClockConfig+0x1fc>)
 800150c:	6882      	ldr	r2, [r0, #8]
 800150e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001512:	430a      	orrs	r2, r1
 8001514:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001516:	071b      	lsls	r3, r3, #28
 8001518:	d518      	bpl.n	800154c <HAL_RCC_ClockConfig+0x17c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800151a:	6922      	ldr	r2, [r4, #16]
 800151c:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 8001520:	d00d      	beq.n	800153e <HAL_RCC_ClockConfig+0x16e>
 8001522:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8001526:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800152a:	d008      	beq.n	800153e <HAL_RCC_ClockConfig+0x16e>
 800152c:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8001530:	d005      	beq.n	800153e <HAL_RCC_ClockConfig+0x16e>
 8001532:	f240 21c1 	movw	r1, #705	; 0x2c1
 8001536:	4826      	ldr	r0, [pc, #152]	; (80015d0 <HAL_RCC_ClockConfig+0x200>)
 8001538:	f7ff f958 	bl	80007ec <assert_failed>
 800153c:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800153e:	4923      	ldr	r1, [pc, #140]	; (80015cc <HAL_RCC_ClockConfig+0x1fc>)
 8001540:	688b      	ldr	r3, [r1, #8]
 8001542:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001546:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800154a:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800154c:	f7ff ff0a 	bl	8001364 <HAL_RCC_GetSysClockFreq>
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <HAL_RCC_ClockConfig+0x1fc>)
 8001552:	4c20      	ldr	r4, [pc, #128]	; (80015d4 <HAL_RCC_ClockConfig+0x204>)
 8001554:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8001556:	4920      	ldr	r1, [pc, #128]	; (80015d8 <HAL_RCC_ClockConfig+0x208>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001558:	4a20      	ldr	r2, [pc, #128]	; (80015dc <HAL_RCC_ClockConfig+0x20c>)
 800155a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800155e:	5ce3      	ldrb	r3, [r4, r3]
 8001560:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8001564:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001566:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8001568:	f7ff fa54 	bl	8000a14 <HAL_InitTick>
  return HAL_OK;
 800156c:	2000      	movs	r0, #0
}
 800156e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001572:	f240 2152 	movw	r1, #594	; 0x252
 8001576:	4816      	ldr	r0, [pc, #88]	; (80015d0 <HAL_RCC_ClockConfig+0x200>)
 8001578:	f7ff f938 	bl	80007ec <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_RCC_ClockConfig+0x1f8>)
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	42ab      	cmp	r3, r5
 8001586:	f4ff af38 	bcc.w	80013fa <HAL_RCC_ClockConfig+0x2a>
 800158a:	e740      	b.n	800140e <HAL_RCC_ClockConfig+0x3e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800158c:	f240 2151 	movw	r1, #593	; 0x251
 8001590:	480f      	ldr	r0, [pc, #60]	; (80015d0 <HAL_RCC_ClockConfig+0x200>)
 8001592:	f7ff f92b 	bl	80007ec <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001596:	2d07      	cmp	r5, #7
 8001598:	f67f af29 	bls.w	80013ee <HAL_RCC_ClockConfig+0x1e>
 800159c:	e7e9      	b.n	8001572 <HAL_RCC_ClockConfig+0x1a2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_RCC_ClockConfig+0x1fc>)
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	0396      	lsls	r6, r2, #14
 80015a4:	f53f af74 	bmi.w	8001490 <HAL_RCC_ClockConfig+0xc0>
 80015a8:	e72e      	b.n	8001408 <HAL_RCC_ClockConfig+0x38>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80015aa:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80015ae:	4808      	ldr	r0, [pc, #32]	; (80015d0 <HAL_RCC_ClockConfig+0x200>)
 80015b0:	f7ff f91c 	bl	80007ec <assert_failed>
 80015b4:	6863      	ldr	r3, [r4, #4]
 80015b6:	e760      	b.n	800147a <HAL_RCC_ClockConfig+0xaa>
    return HAL_ERROR;
 80015b8:	2001      	movs	r0, #1
}
 80015ba:	4770      	bx	lr
        return HAL_TIMEOUT;
 80015bc:	2003      	movs	r0, #3
 80015be:	e724      	b.n	800140a <HAL_RCC_ClockConfig+0x3a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c0:	0190      	lsls	r0, r2, #6
 80015c2:	f53f af65 	bmi.w	8001490 <HAL_RCC_ClockConfig+0xc0>
 80015c6:	e71f      	b.n	8001408 <HAL_RCC_ClockConfig+0x38>
 80015c8:	40023c00 	.word	0x40023c00
 80015cc:	40023800 	.word	0x40023800
 80015d0:	08002968 	.word	0x08002968
 80015d4:	080028d8 	.word	0x080028d8
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000000 	.word	0x20000000

080015e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015e4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80015e6:	4905      	ldr	r1, [pc, #20]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015e8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80015ec:	6808      	ldr	r0, [r1, #0]
 80015ee:	5cd3      	ldrb	r3, [r2, r3]
}
 80015f0:	40d8      	lsrs	r0, r3
 80015f2:	4770      	bx	lr
 80015f4:	40023800 	.word	0x40023800
 80015f8:	080028e8 	.word	0x080028e8
 80015fc:	20000000 	.word	0x20000000

08001600 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001604:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001606:	4905      	ldr	r1, [pc, #20]	; (800161c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001608:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800160c:	6808      	ldr	r0, [r1, #0]
 800160e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001610:	40d8      	lsrs	r0, r3
 8001612:	4770      	bx	lr
 8001614:	40023800 	.word	0x40023800
 8001618:	080028e8 	.word	0x080028e8
 800161c:	20000000 	.word	0x20000000

08001620 <SPI_WaitFlagStateUntilTimeout.part.0>:
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001620:	e9d0 3100 	ldrd	r3, r1, [r0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001624:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001626:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800162a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800162e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001630:	d10a      	bne.n	8001648 <SPI_WaitFlagStateUntilTimeout.part.0+0x28>
 8001632:	6882      	ldr	r2, [r0, #8]
 8001634:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001638:	d002      	beq.n	8001640 <SPI_WaitFlagStateUntilTimeout.part.0+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800163a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800163e:	d103      	bne.n	8001648 <SPI_WaitFlagStateUntilTimeout.part.0+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001648:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800164a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800164e:	d107      	bne.n	8001660 <SPI_WaitFlagStateUntilTimeout.part.0+0x40>
        {
          SPI_RESET_CRC(hspi);
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800165e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001660:	2201      	movs	r2, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001662:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8001664:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001668:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      }
    }
  }

  return HAL_OK;
}
 800166c:	2003      	movs	r0, #3
 800166e:	4770      	bx	lr

08001670 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001670:	2800      	cmp	r0, #0
 8001672:	f000 8098 	beq.w	80017a6 <HAL_SPI_Init+0x136>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8001676:	6803      	ldr	r3, [r0, #0]
 8001678:	4a65      	ldr	r2, [pc, #404]	; (8001810 <HAL_SPI_Init+0x1a0>)
 800167a:	4293      	cmp	r3, r2
{
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8001680:	d010      	beq.n	80016a4 <HAL_SPI_Init+0x34>
 8001682:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8001686:	4293      	cmp	r3, r2
 8001688:	d00c      	beq.n	80016a4 <HAL_SPI_Init+0x34>
 800168a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800168e:	4293      	cmp	r3, r2
 8001690:	d008      	beq.n	80016a4 <HAL_SPI_Init+0x34>
 8001692:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001696:	4293      	cmp	r3, r2
 8001698:	d004      	beq.n	80016a4 <HAL_SPI_Init+0x34>
 800169a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800169e:	485d      	ldr	r0, [pc, #372]	; (8001814 <HAL_SPI_Init+0x1a4>)
 80016a0:	f7ff f8a4 	bl	80007ec <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80016a4:	6863      	ldr	r3, [r4, #4]
 80016a6:	b11b      	cbz	r3, 80016b0 <HAL_SPI_Init+0x40>
 80016a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016ac:	f040 808e 	bne.w	80017cc <HAL_SPI_Init+0x15c>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80016b0:	68a3      	ldr	r3, [r4, #8]
 80016b2:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80016b6:	d003      	beq.n	80016c0 <HAL_SPI_Init+0x50>
 80016b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016bc:	f040 809c 	bne.w	80017f8 <HAL_SPI_Init+0x188>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80016c0:	68e3      	ldr	r3, [r4, #12]
 80016c2:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80016c6:	d177      	bne.n	80017b8 <HAL_SPI_Init+0x148>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80016c8:	69a3      	ldr	r3, [r4, #24]
 80016ca:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 80016ce:	d003      	beq.n	80016d8 <HAL_SPI_Init+0x68>
 80016d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016d4:	f040 8085 	bne.w	80017e2 <HAL_SPI_Init+0x172>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80016d8:	69e3      	ldr	r3, [r4, #28]
 80016da:	f033 0318 	bics.w	r3, r3, #24
 80016de:	d006      	beq.n	80016ee <HAL_SPI_Init+0x7e>
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	d004      	beq.n	80016ee <HAL_SPI_Init+0x7e>
 80016e4:	f240 1147 	movw	r1, #327	; 0x147
 80016e8:	484a      	ldr	r0, [pc, #296]	; (8001814 <HAL_SPI_Init+0x1a4>)
 80016ea:	f7ff f87f 	bl	80007ec <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80016ee:	6a23      	ldr	r3, [r4, #32]
 80016f0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80016f4:	d004      	beq.n	8001700 <HAL_SPI_Init+0x90>
 80016f6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80016fa:	4846      	ldr	r0, [pc, #280]	; (8001814 <HAL_SPI_Init+0x1a4>)
 80016fc:	f7ff f876 	bl	80007ec <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8001700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001702:	2b00      	cmp	r3, #0
 8001704:	d03d      	beq.n	8001782 <HAL_SPI_Init+0x112>
 8001706:	2b10      	cmp	r3, #16
 8001708:	d133      	bne.n	8001772 <HAL_SPI_Init+0x102>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800170a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170e:	2000      	movs	r0, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001710:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001714:	62a0      	str	r0, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001716:	2a00      	cmp	r2, #0
 8001718:	d047      	beq.n	80017aa <HAL_SPI_Init+0x13a>
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800171a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800171e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8001722:	432b      	orrs	r3, r5
 8001724:	4313      	orrs	r3, r2
 8001726:	6962      	ldr	r2, [r4, #20]
 8001728:	69e5      	ldr	r5, [r4, #28]
 800172a:	6a26      	ldr	r6, [r4, #32]
 800172c:	430b      	orrs	r3, r1
 800172e:	4313      	orrs	r3, r2
 8001730:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001732:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001734:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8001736:	2502      	movs	r5, #2
 8001738:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800173c:	4333      	orrs	r3, r6
 800173e:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8001742:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001744:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001746:	0c12      	lsrs	r2, r2, #16
 8001748:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800174a:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800174e:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001750:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8001752:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8001756:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001758:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800175a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800175c:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800175e:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8001764:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001766:	61cb      	str	r3, [r1, #28]
  return HAL_OK;
 8001768:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800176a:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800176c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8001770:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8001772:	f240 1149 	movw	r1, #329	; 0x149
 8001776:	4827      	ldr	r0, [pc, #156]	; (8001814 <HAL_SPI_Init+0x1a4>)
 8001778:	f7ff f838 	bl	80007ec <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800177c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1c3      	bne.n	800170a <HAL_SPI_Init+0x9a>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8001782:	6923      	ldr	r3, [r4, #16]
 8001784:	f033 0302 	bics.w	r3, r3, #2
 8001788:	d004      	beq.n	8001794 <HAL_SPI_Init+0x124>
 800178a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800178e:	4821      	ldr	r0, [pc, #132]	; (8001814 <HAL_SPI_Init+0x1a4>)
 8001790:	f7ff f82c 	bl	80007ec <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8001794:	6963      	ldr	r3, [r4, #20]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d9b7      	bls.n	800170a <HAL_SPI_Init+0x9a>
 800179a:	f240 114d 	movw	r1, #333	; 0x14d
 800179e:	481d      	ldr	r0, [pc, #116]	; (8001814 <HAL_SPI_Init+0x1a4>)
 80017a0:	f7ff f824 	bl	80007ec <assert_failed>
 80017a4:	e7b1      	b.n	800170a <HAL_SPI_Init+0x9a>
    return HAL_ERROR;
 80017a6:	2001      	movs	r0, #1
}
 80017a8:	4770      	bx	lr
    HAL_SPI_MspInit(hspi);
 80017aa:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80017ac:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80017b0:	f7ff f844 	bl	800083c <HAL_SPI_MspInit>
 80017b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80017b6:	e7b0      	b.n	800171a <HAL_SPI_Init+0xaa>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80017b8:	f240 1145 	movw	r1, #325	; 0x145
 80017bc:	4815      	ldr	r0, [pc, #84]	; (8001814 <HAL_SPI_Init+0x1a4>)
 80017be:	f7ff f815 	bl	80007ec <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80017c2:	69a3      	ldr	r3, [r4, #24]
 80017c4:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 80017c8:	d086      	beq.n	80016d8 <HAL_SPI_Init+0x68>
 80017ca:	e781      	b.n	80016d0 <HAL_SPI_Init+0x60>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80017cc:	f240 1143 	movw	r1, #323	; 0x143
 80017d0:	4810      	ldr	r0, [pc, #64]	; (8001814 <HAL_SPI_Init+0x1a4>)
 80017d2:	f7ff f80b 	bl	80007ec <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80017d6:	68a3      	ldr	r3, [r4, #8]
 80017d8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80017dc:	f43f af70 	beq.w	80016c0 <HAL_SPI_Init+0x50>
 80017e0:	e76a      	b.n	80016b8 <HAL_SPI_Init+0x48>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80017e2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80017e6:	480b      	ldr	r0, [pc, #44]	; (8001814 <HAL_SPI_Init+0x1a4>)
 80017e8:	f7ff f800 	bl	80007ec <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80017ec:	69e3      	ldr	r3, [r4, #28]
 80017ee:	f033 0318 	bics.w	r3, r3, #24
 80017f2:	f43f af7c 	beq.w	80016ee <HAL_SPI_Init+0x7e>
 80017f6:	e773      	b.n	80016e0 <HAL_SPI_Init+0x70>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80017f8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_SPI_Init+0x1a4>)
 80017fe:	f7fe fff5 	bl	80007ec <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8001802:	68e3      	ldr	r3, [r4, #12]
 8001804:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8001808:	f43f af5e 	beq.w	80016c8 <HAL_SPI_Init+0x58>
 800180c:	e7d4      	b.n	80017b8 <HAL_SPI_Init+0x148>
 800180e:	bf00      	nop
 8001810:	40013000 	.word	0x40013000
 8001814:	080029a0 	.word	0x080029a0

08001818 <HAL_SPI_Transmit>:
{
 8001818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800181c:	460e      	mov	r6, r1
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800181e:	6881      	ldr	r1, [r0, #8]
{
 8001820:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8001822:	f431 4300 	bics.w	r3, r1, #32768	; 0x8000
{
 8001826:	b082      	sub	sp, #8
 8001828:	4604      	mov	r4, r0
 800182a:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800182c:	d004      	beq.n	8001838 <HAL_SPI_Transmit+0x20>
 800182e:	f240 21f2 	movw	r1, #754	; 0x2f2
 8001832:	488f      	ldr	r0, [pc, #572]	; (8001a70 <HAL_SPI_Transmit+0x258>)
 8001834:	f7fe ffda 	bl	80007ec <assert_failed>
  __HAL_LOCK(hspi);
 8001838:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800183c:	2b01      	cmp	r3, #1
 800183e:	f000 8084 	beq.w	800194a <HAL_SPI_Transmit+0x132>
 8001842:	2301      	movs	r3, #1
 8001844:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001848:	f7ff f92e 	bl	8000aa8 <HAL_GetTick>
 800184c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800184e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001852:	b2c0      	uxtb	r0, r0
 8001854:	2801      	cmp	r0, #1
 8001856:	d009      	beq.n	800186c <HAL_SPI_Transmit+0x54>
    errorcode = HAL_BUSY;
 8001858:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800185a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800185c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800185e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001862:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001866:	b002      	add	sp, #8
 8001868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800186c:	2e00      	cmp	r6, #0
 800186e:	d0f4      	beq.n	800185a <HAL_SPI_Transmit+0x42>
 8001870:	f1b8 0f00 	cmp.w	r8, #0
 8001874:	d0f1      	beq.n	800185a <HAL_SPI_Transmit+0x42>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001876:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001878:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800187a:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800187c:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800187e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001882:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001886:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001888:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferSize  = 0U;
 800188a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800188c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001890:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001894:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->RxXferCount = 0U;
 8001898:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800189a:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800189c:	d103      	bne.n	80018a6 <HAL_SPI_Transmit+0x8e>
    SPI_1LINE_TX(hspi);
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018a4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	0652      	lsls	r2, r2, #25
 80018aa:	d552      	bpl.n	8001952 <HAL_SPI_Transmit+0x13a>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018ac:	68e2      	ldr	r2, [r4, #12]
 80018ae:	6861      	ldr	r1, [r4, #4]
 80018b0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80018b4:	d07e      	beq.n	80019b4 <HAL_SPI_Transmit+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018b6:	2900      	cmp	r1, #0
 80018b8:	d167      	bne.n	800198a <HAL_SPI_Transmit+0x172>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018ba:	7832      	ldrb	r2, [r6, #0]
 80018bc:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 80018be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018c6:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80018c8:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018ca:	6322      	str	r2, [r4, #48]	; 0x30
 80018cc:	1c6b      	adds	r3, r5, #1
 80018ce:	d145      	bne.n	800195c <HAL_SPI_Transmit+0x144>
    while (hspi->TxXferCount > 0U)
 80018d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b18b      	cbz	r3, 80018fa <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	0796      	lsls	r6, r2, #30
 80018dc:	d560      	bpl.n	80019a0 <HAL_SPI_Transmit+0x188>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80018e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80018e8:	3b01      	subs	r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80018ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018f0:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 80018f2:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018f4:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ed      	bne.n	80018d6 <HAL_SPI_Transmit+0xbe>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80018fa:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <HAL_SPI_Transmit+0x25c>)
 80018fc:	495e      	ldr	r1, [pc, #376]	; (8001a78 <HAL_SPI_Transmit+0x260>)
 80018fe:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001900:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001902:	fba1 1303 	umull	r1, r3, r1, r3
 8001906:	0d5b      	lsrs	r3, r3, #21
 8001908:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800190c:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001910:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001914:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001916:	d107      	bne.n	8001928 <HAL_SPI_Transmit+0x110>
 8001918:	e03b      	b.n	8001992 <HAL_SPI_Transmit+0x17a>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800191a:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800191c:	6822      	ldr	r2, [r4, #0]
      count--;
 800191e:	3b01      	subs	r3, #1
 8001920:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001922:	6893      	ldr	r3, [r2, #8]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	d502      	bpl.n	800192e <HAL_SPI_Transmit+0x116>
      if (count == 0U)
 8001928:	9b01      	ldr	r3, [sp, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f5      	bne.n	800191a <HAL_SPI_Transmit+0x102>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800192e:	68a3      	ldr	r3, [r4, #8]
 8001930:	b933      	cbnz	r3, 8001940 <HAL_SPI_Transmit+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	68d3      	ldr	r3, [r2, #12]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	6893      	ldr	r3, [r2, #8]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001940:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001942:	3000      	adds	r0, #0
 8001944:	bf18      	it	ne
 8001946:	2001      	movne	r0, #1
error:
 8001948:	e787      	b.n	800185a <HAL_SPI_Transmit+0x42>
  __HAL_LOCK(hspi);
 800194a:	2002      	movs	r0, #2
}
 800194c:	b002      	add	sp, #8
 800194e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	e7a7      	b.n	80018ac <HAL_SPI_Transmit+0x94>
    while (hspi->TxXferCount > 0U)
 800195c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ca      	beq.n	80018fa <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	0792      	lsls	r2, r2, #30
 800196a:	d51c      	bpl.n	80019a6 <HAL_SPI_Transmit+0x18e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800196c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800196e:	7812      	ldrb	r2, [r2, #0]
 8001970:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001972:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001974:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001976:	3b01      	subs	r3, #1
 8001978:	b29b      	uxth	r3, r3
 800197a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800197c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800197e:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 8001980:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001982:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ed      	bne.n	8001964 <HAL_SPI_Transmit+0x14c>
 8001988:	e7b7      	b.n	80018fa <HAL_SPI_Transmit+0xe2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800198a:	f1b8 0f01 	cmp.w	r8, #1
 800198e:	d19d      	bne.n	80018cc <HAL_SPI_Transmit+0xb4>
 8001990:	e793      	b.n	80018ba <HAL_SPI_Transmit+0xa2>
 8001992:	1c68      	adds	r0, r5, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	d155      	bne.n	8001a44 <HAL_SPI_Transmit+0x22c>
 8001998:	6893      	ldr	r3, [r2, #8]
 800199a:	0619      	lsls	r1, r3, #24
 800199c:	d4fc      	bmi.n	8001998 <HAL_SPI_Transmit+0x180>
 800199e:	e7c6      	b.n	800192e <HAL_SPI_Transmit+0x116>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019a0:	f7ff f882 	bl	8000aa8 <HAL_GetTick>
 80019a4:	e794      	b.n	80018d0 <HAL_SPI_Transmit+0xb8>
 80019a6:	f7ff f87f 	bl	8000aa8 <HAL_GetTick>
 80019aa:	1bc0      	subs	r0, r0, r7
 80019ac:	42a8      	cmp	r0, r5
 80019ae:	d3d5      	bcc.n	800195c <HAL_SPI_Transmit+0x144>
          errorcode = HAL_TIMEOUT;
 80019b0:	2003      	movs	r0, #3
 80019b2:	e752      	b.n	800185a <HAL_SPI_Transmit+0x42>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d03c      	beq.n	8001a32 <HAL_SPI_Transmit+0x21a>
 80019b8:	f1b8 0f01 	cmp.w	r8, #1
 80019bc:	d039      	beq.n	8001a32 <HAL_SPI_Transmit+0x21a>
 80019be:	1c68      	adds	r0, r5, #1
 80019c0:	d120      	bne.n	8001a04 <HAL_SPI_Transmit+0x1ec>
    while (hspi->TxXferCount > 0U)
 80019c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d097      	beq.n	80018fa <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	0791      	lsls	r1, r2, #30
 80019d0:	d510      	bpl.n	80019f4 <HAL_SPI_Transmit+0x1dc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019d4:	f832 1b02 	ldrh.w	r1, [r2], #2
 80019d8:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 80019da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019dc:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80019e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d086      	beq.n	80018fa <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	0791      	lsls	r1, r2, #30
 80019f2:	d4ee      	bmi.n	80019d2 <HAL_SPI_Transmit+0x1ba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019f4:	f7ff f858 	bl	8000aa8 <HAL_GetTick>
 80019f8:	e7e3      	b.n	80019c2 <HAL_SPI_Transmit+0x1aa>
 80019fa:	f7ff f855 	bl	8000aa8 <HAL_GetTick>
 80019fe:	1bc0      	subs	r0, r0, r7
 8001a00:	42a8      	cmp	r0, r5
 8001a02:	d2d5      	bcs.n	80019b0 <HAL_SPI_Transmit+0x198>
    while (hspi->TxXferCount > 0U)
 8001a04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f43f af76 	beq.w	80018fa <HAL_SPI_Transmit+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	0796      	lsls	r6, r2, #30
 8001a14:	d5f1      	bpl.n	80019fa <HAL_SPI_Transmit+0x1e2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a16:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a18:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001a1c:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8001a1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a20:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001a28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_SPI_Transmit+0x1f6>
 8001a30:	e763      	b.n	80018fa <HAL_SPI_Transmit+0xe2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a32:	f836 2b02 	ldrh.w	r2, [r6], #2
 8001a36:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001a38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a3a:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001a42:	e7bc      	b.n	80019be <HAL_SPI_Transmit+0x1a6>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a44:	6893      	ldr	r3, [r2, #8]
 8001a46:	061a      	lsls	r2, r3, #24
 8001a48:	f57f af71 	bpl.w	800192e <HAL_SPI_Transmit+0x116>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001a4c:	f7ff f82c 	bl	8000aa8 <HAL_GetTick>
 8001a50:	1bc0      	subs	r0, r0, r7
 8001a52:	4285      	cmp	r5, r0
 8001a54:	d89d      	bhi.n	8001992 <HAL_SPI_Transmit+0x17a>
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff fde2 	bl	8001620 <SPI_WaitFlagStateUntilTimeout.part.0>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	f43f af66 	beq.w	800192e <HAL_SPI_Transmit+0x116>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a62:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a64:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a66:	4313      	orrs	r3, r2
 8001a68:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a6a:	6562      	str	r2, [r4, #84]	; 0x54
 8001a6c:	e75f      	b.n	800192e <HAL_SPI_Transmit+0x116>
 8001a6e:	bf00      	nop
 8001a70:	080029a0 	.word	0x080029a0
 8001a74:	20000000 	.word	0x20000000
 8001a78:	165e9f81 	.word	0x165e9f81

08001a7c <HAL_SPI_TransmitReceive>:
{
 8001a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a80:	460d      	mov	r5, r1
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8001a82:	6881      	ldr	r1, [r0, #8]
{
 8001a84:	b082      	sub	sp, #8
 8001a86:	4604      	mov	r4, r0
 8001a88:	4617      	mov	r7, r2
 8001a8a:	461e      	mov	r6, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	f040 80ab 	bne.w	8001be8 <HAL_SPI_TransmitReceive+0x16c>
  __HAL_LOCK(hspi);
 8001a92:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	f000 80b0 	beq.w	8001bfc <HAL_SPI_TransmitReceive+0x180>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001aa2:	f7ff f801 	bl	8000aa8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001aa6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001aaa:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8001aac:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001aae:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001ab0:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ab2:	d011      	beq.n	8001ad8 <HAL_SPI_TransmitReceive+0x5c>
 8001ab4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001ab8:	d009      	beq.n	8001ace <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 8001aba:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001abc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8001abe:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8001ac0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ac4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001ac8:	b002      	add	sp, #8
 8001aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ace:	68a1      	ldr	r1, [r4, #8]
 8001ad0:	2900      	cmp	r1, #0
 8001ad2:	d1f2      	bne.n	8001aba <HAL_SPI_TransmitReceive+0x3e>
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d1f0      	bne.n	8001aba <HAL_SPI_TransmitReceive+0x3e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ad8:	2d00      	cmp	r5, #0
 8001ada:	f000 8093 	beq.w	8001c04 <HAL_SPI_TransmitReceive+0x188>
 8001ade:	2f00      	cmp	r7, #0
 8001ae0:	f000 8090 	beq.w	8001c04 <HAL_SPI_TransmitReceive+0x188>
 8001ae4:	2e00      	cmp	r6, #0
 8001ae6:	f000 808d 	beq.w	8001c04 <HAL_SPI_TransmitReceive+0x188>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001aea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aee:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001af0:	63a7      	str	r7, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001af2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001af4:	bf1c      	itt	ne
 8001af6:	2305      	movne	r3, #5
 8001af8:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8001b00:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001b02:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b04:	6808      	ldr	r0, [r1, #0]
  hspi->RxXferSize  = Size;
 8001b06:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8001b08:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b0c:	0643      	lsls	r3, r0, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b0e:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b10:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b12:	d403      	bmi.n	8001b1c <HAL_SPI_TransmitReceive+0xa0>
    __HAL_SPI_ENABLE(hspi);
 8001b14:	680b      	ldr	r3, [r1, #0]
 8001b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1a:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b1c:	68e3      	ldr	r3, [r4, #12]
 8001b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b22:	f000 80a7 	beq.w	8001c74 <HAL_SPI_TransmitReceive+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	f000 810c 	beq.w	8001d44 <HAL_SPI_TransmitReceive+0x2c8>
 8001b2c:	2e01      	cmp	r6, #1
 8001b2e:	f000 8109 	beq.w	8001d44 <HAL_SPI_TransmitReceive+0x2c8>
 8001b32:	9b08      	ldr	r3, [sp, #32]
 8001b34:	3301      	adds	r3, #1
        txallowed = 1U;
 8001b36:	f04f 0501 	mov.w	r5, #1
 8001b3a:	d027      	beq.n	8001b8c <HAL_SPI_TransmitReceive+0x110>
 8001b3c:	e064      	b.n	8001c08 <HAL_SPI_TransmitReceive+0x18c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	0792      	lsls	r2, r2, #30
 8001b44:	d50f      	bpl.n	8001b66 <HAL_SPI_TransmitReceive+0xea>
 8001b46:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001b48:	b292      	uxth	r2, r2
 8001b4a:	b162      	cbz	r2, 8001b66 <HAL_SPI_TransmitReceive+0xea>
 8001b4c:	b15d      	cbz	r5, 8001b66 <HAL_SPI_TransmitReceive+0xea>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001b4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001b54:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001b56:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001b58:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 8001b5a:	3a01      	subs	r2, #1
 8001b5c:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 8001b5e:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8001b60:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001b62:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8001b64:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	07d7      	lsls	r7, r2, #31
 8001b6a:	d50d      	bpl.n	8001b88 <HAL_SPI_TransmitReceive+0x10c>
 8001b6c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	b152      	cbz	r2, 8001b88 <HAL_SPI_TransmitReceive+0x10c>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001b72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8001b78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8001b7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8001b80:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8001b82:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8001b84:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 8001b86:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001b88:	f7fe ff8e 	bl	8000aa8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1d4      	bne.n	8001b3e <HAL_SPI_TransmitReceive+0xc2>
 8001b94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1d0      	bne.n	8001b3e <HAL_SPI_TransmitReceive+0xc2>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001b9c:	4b8d      	ldr	r3, [pc, #564]	; (8001dd4 <HAL_SPI_TransmitReceive+0x358>)
 8001b9e:	4a8e      	ldr	r2, [pc, #568]	; (8001dd8 <HAL_SPI_TransmitReceive+0x35c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ba2:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	0d5b      	lsrs	r3, r3, #21
 8001baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bb2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001bb6:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bb8:	d107      	bne.n	8001bca <HAL_SPI_TransmitReceive+0x14e>
 8001bba:	e0d8      	b.n	8001d6e <HAL_SPI_TransmitReceive+0x2f2>
      count--;
 8001bbc:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001bbe:	6822      	ldr	r2, [r4, #0]
      count--;
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001bc4:	6893      	ldr	r3, [r2, #8]
 8001bc6:	061b      	lsls	r3, r3, #24
 8001bc8:	d502      	bpl.n	8001bd0 <HAL_SPI_TransmitReceive+0x154>
      if (count == 0U)
 8001bca:	9b01      	ldr	r3, [sp, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f5      	bne.n	8001bbc <HAL_SPI_TransmitReceive+0x140>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bd0:	68a0      	ldr	r0, [r4, #8]
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	f040 80c9 	bne.w	8001d6a <HAL_SPI_TransmitReceive+0x2ee>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	9000      	str	r0, [sp, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	9200      	str	r2, [sp, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	9b00      	ldr	r3, [sp, #0]
 8001be6:	e769      	b.n	8001abc <HAL_SPI_TransmitReceive+0x40>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8001be8:	f240 415a 	movw	r1, #1114	; 0x45a
 8001bec:	487b      	ldr	r0, [pc, #492]	; (8001ddc <HAL_SPI_TransmitReceive+0x360>)
 8001bee:	f7fe fdfd 	bl	80007ec <assert_failed>
  __HAL_LOCK(hspi);
 8001bf2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	f47f af50 	bne.w	8001a9c <HAL_SPI_TransmitReceive+0x20>
 8001bfc:	2002      	movs	r0, #2
}
 8001bfe:	b002      	add	sp, #8
 8001c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 8001c04:	2001      	movs	r0, #1
 8001c06:	e759      	b.n	8001abc <HAL_SPI_TransmitReceive+0x40>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	b923      	cbnz	r3, 8001c18 <HAL_SPI_TransmitReceive+0x19c>
 8001c0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80b0 	beq.w	8001d78 <HAL_SPI_TransmitReceive+0x2fc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	0796      	lsls	r6, r2, #30
 8001c1e:	d50f      	bpl.n	8001c40 <HAL_SPI_TransmitReceive+0x1c4>
 8001c20:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001c22:	b292      	uxth	r2, r2
 8001c24:	b162      	cbz	r2, 8001c40 <HAL_SPI_TransmitReceive+0x1c4>
 8001c26:	b15d      	cbz	r5, 8001c40 <HAL_SPI_TransmitReceive+0x1c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c28:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c2a:	7812      	ldrb	r2, [r2, #0]
 8001c2c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001c2e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001c30:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001c32:	6823      	ldr	r3, [r4, #0]
        hspi->TxXferCount--;
 8001c34:	3a01      	subs	r2, #1
 8001c36:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr++;
 8001c38:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8001c3a:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001c3c:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8001c3e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	07d0      	lsls	r0, r2, #31
 8001c44:	d50d      	bpl.n	8001c62 <HAL_SPI_TransmitReceive+0x1e6>
 8001c46:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	b152      	cbz	r2, 8001c62 <HAL_SPI_TransmitReceive+0x1e6>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8001c52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8001c54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8001c5a:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8001c5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8001c5e:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 8001c60:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c62:	f7fe ff21 	bl	8000aa8 <HAL_GetTick>
 8001c66:	9b08      	ldr	r3, [sp, #32]
 8001c68:	eba0 0008 	sub.w	r0, r0, r8
 8001c6c:	4283      	cmp	r3, r0
 8001c6e:	d8cb      	bhi.n	8001c08 <HAL_SPI_TransmitReceive+0x18c>
        errorcode = HAL_TIMEOUT;
 8001c70:	2003      	movs	r0, #3
 8001c72:	e723      	b.n	8001abc <HAL_SPI_TransmitReceive+0x40>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c74:	2a00      	cmp	r2, #0
 8001c76:	d06f      	beq.n	8001d58 <HAL_SPI_TransmitReceive+0x2dc>
 8001c78:	2e01      	cmp	r6, #1
 8001c7a:	d06d      	beq.n	8001d58 <HAL_SPI_TransmitReceive+0x2dc>
 8001c7c:	9b08      	ldr	r3, [sp, #32]
 8001c7e:	3301      	adds	r3, #1
{
 8001c80:	f04f 0501 	mov.w	r5, #1
 8001c84:	d024      	beq.n	8001cd0 <HAL_SPI_TransmitReceive+0x254>
 8001c86:	e02c      	b.n	8001ce2 <HAL_SPI_TransmitReceive+0x266>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	0797      	lsls	r7, r2, #30
 8001c8e:	d50d      	bpl.n	8001cac <HAL_SPI_TransmitReceive+0x230>
 8001c90:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001c92:	b292      	uxth	r2, r2
 8001c94:	b152      	cbz	r2, 8001cac <HAL_SPI_TransmitReceive+0x230>
 8001c96:	b14d      	cbz	r5, 8001cac <HAL_SPI_TransmitReceive+0x230>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001c9a:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001c9e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001ca0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ca2:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001ca4:	3a01      	subs	r2, #1
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 8001caa:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	07d6      	lsls	r6, r2, #31
 8001cb0:	d50c      	bpl.n	8001ccc <HAL_SPI_TransmitReceive+0x250>
 8001cb2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001cb4:	b292      	uxth	r2, r2
 8001cb6:	b14a      	cbz	r2, 8001ccc <HAL_SPI_TransmitReceive+0x250>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8001cc0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cc2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001cca:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ccc:	f7fe feec 	bl	8000aa8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1d7      	bne.n	8001c88 <HAL_SPI_TransmitReceive+0x20c>
 8001cd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1d3      	bne.n	8001c88 <HAL_SPI_TransmitReceive+0x20c>
 8001ce0:	e75c      	b.n	8001b9c <HAL_SPI_TransmitReceive+0x120>
 8001ce2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	b91b      	cbnz	r3, 8001cf0 <HAL_SPI_TransmitReceive+0x274>
 8001ce8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d043      	beq.n	8001d78 <HAL_SPI_TransmitReceive+0x2fc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	0790      	lsls	r0, r2, #30
 8001cf6:	d50d      	bpl.n	8001d14 <HAL_SPI_TransmitReceive+0x298>
 8001cf8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	b152      	cbz	r2, 8001d14 <HAL_SPI_TransmitReceive+0x298>
 8001cfe:	b14d      	cbz	r5, 8001d14 <HAL_SPI_TransmitReceive+0x298>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d00:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d02:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001d06:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001d08:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d0a:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d0c:	3a01      	subs	r2, #1
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	86e2      	strh	r2, [r4, #54]	; 0x36
        txallowed = 0U;
 8001d12:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	07d1      	lsls	r1, r2, #31
 8001d18:	d50c      	bpl.n	8001d34 <HAL_SPI_TransmitReceive+0x2b8>
 8001d1a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001d1c:	b292      	uxth	r2, r2
 8001d1e:	b14a      	cbz	r2, 8001d34 <HAL_SPI_TransmitReceive+0x2b8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8001d28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d2a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001d32:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d34:	f7fe feb8 	bl	8000aa8 <HAL_GetTick>
 8001d38:	9b08      	ldr	r3, [sp, #32]
 8001d3a:	eba0 0008 	sub.w	r0, r0, r8
 8001d3e:	4283      	cmp	r3, r0
 8001d40:	d8cf      	bhi.n	8001ce2 <HAL_SPI_TransmitReceive+0x266>
 8001d42:	e795      	b.n	8001c70 <HAL_SPI_TransmitReceive+0x1f4>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d44:	782b      	ldrb	r3, [r5, #0]
 8001d46:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 8001d48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d50:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8001d52:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d54:	6322      	str	r2, [r4, #48]	; 0x30
 8001d56:	e6ec      	b.n	8001b32 <HAL_SPI_TransmitReceive+0xb6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d58:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001d5c:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8001d5e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d60:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001d68:	e788      	b.n	8001c7c <HAL_SPI_TransmitReceive+0x200>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	e6a6      	b.n	8001abc <HAL_SPI_TransmitReceive+0x40>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	6893      	ldr	r3, [r2, #8]
 8001d72:	0619      	lsls	r1, r3, #24
 8001d74:	d4fc      	bmi.n	8001d70 <HAL_SPI_TransmitReceive+0x2f4>
 8001d76:	e72b      	b.n	8001bd0 <HAL_SPI_TransmitReceive+0x154>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_SPI_TransmitReceive+0x358>)
 8001d7a:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <HAL_SPI_TransmitReceive+0x35c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d7e:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	0d5b      	lsrs	r3, r3, #21
 8001d86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d8a:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d8e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001d92:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d94:	f47f af19 	bne.w	8001bca <HAL_SPI_TransmitReceive+0x14e>
 8001d98:	9b08      	ldr	r3, [sp, #32]
 8001d9a:	e006      	b.n	8001daa <HAL_SPI_TransmitReceive+0x32e>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d9c:	f7fe fe84 	bl	8000aa8 <HAL_GetTick>
 8001da0:	9b08      	ldr	r3, [sp, #32]
 8001da2:	eba0 0008 	sub.w	r0, r0, r8
 8001da6:	4283      	cmp	r3, r0
 8001da8:	d906      	bls.n	8001db8 <HAL_SPI_TransmitReceive+0x33c>
 8001daa:	3301      	adds	r3, #1
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dac:	6822      	ldr	r2, [r4, #0]
 8001dae:	d0df      	beq.n	8001d70 <HAL_SPI_TransmitReceive+0x2f4>
 8001db0:	6893      	ldr	r3, [r2, #8]
 8001db2:	061a      	lsls	r2, r3, #24
 8001db4:	d4f2      	bmi.n	8001d9c <HAL_SPI_TransmitReceive+0x320>
 8001db6:	e70b      	b.n	8001bd0 <HAL_SPI_TransmitReceive+0x154>
 8001db8:	4620      	mov	r0, r4
 8001dba:	f7ff fc31 	bl	8001620 <SPI_WaitFlagStateUntilTimeout.part.0>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	f43f af06 	beq.w	8001bd0 <HAL_SPI_TransmitReceive+0x154>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dc6:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dce:	6562      	str	r2, [r4, #84]	; 0x54
 8001dd0:	e674      	b.n	8001abc <HAL_SPI_TransmitReceive+0x40>
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	165e9f81 	.word	0x165e9f81
 8001ddc:	080029a0 	.word	0x080029a0

08001de0 <HAL_SPI_Receive>:
{
 8001de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001de4:	6845      	ldr	r5, [r0, #4]
 8001de6:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 8001dea:	b082      	sub	sp, #8
 8001dec:	4604      	mov	r4, r0
 8001dee:	4617      	mov	r7, r2
 8001df0:	461e      	mov	r6, r3
 8001df2:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001df4:	d053      	beq.n	8001e9e <HAL_SPI_Receive+0xbe>
  __HAL_LOCK(hspi);
 8001df6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d05d      	beq.n	8001eba <HAL_SPI_Receive+0xda>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001e04:	f7fe fe50 	bl	8000aa8 <HAL_GetTick>
 8001e08:	4605      	mov	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e0a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001e0e:	b2c0      	uxtb	r0, r0
 8001e10:	2801      	cmp	r0, #1
 8001e12:	d009      	beq.n	8001e28 <HAL_SPI_Receive+0x48>
    errorcode = HAL_BUSY;
 8001e14:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001e16:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8001e18:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8001e1a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e1e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001e22:	b002      	add	sp, #8
 8001e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8001e28:	f1b8 0f00 	cmp.w	r8, #0
 8001e2c:	d0f3      	beq.n	8001e16 <HAL_SPI_Receive+0x36>
 8001e2e:	2f00      	cmp	r7, #0
 8001e30:	d0f1      	beq.n	8001e16 <HAL_SPI_Receive+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e32:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e34:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e3e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e48:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001e4a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8001e4c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001e50:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e52:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001e54:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001e56:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e58:	f000 808a 	beq.w	8001f70 <HAL_SPI_Receive+0x190>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	0652      	lsls	r2, r2, #25
 8001e60:	d403      	bmi.n	8001e6a <HAL_SPI_Receive+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e68:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e6a:	68e2      	ldr	r2, [r4, #12]
 8001e6c:	bb4a      	cbnz	r2, 8001ec2 <HAL_SPI_Receive+0xe2>
 8001e6e:	1c71      	adds	r1, r6, #1
 8001e70:	d00b      	beq.n	8001e8a <HAL_SPI_Receive+0xaa>
 8001e72:	e06f      	b.n	8001f54 <HAL_SPI_Receive+0x174>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e76:	7b1b      	ldrb	r3, [r3, #12]
 8001e78:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8001e7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e82:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8001e84:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e86:	63a2      	str	r2, [r4, #56]	; 0x38
 8001e88:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 8001e8a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001e8c:	b292      	uxth	r2, r2
 8001e8e:	2a00      	cmp	r2, #0
 8001e90:	d02c      	beq.n	8001eec <HAL_SPI_Receive+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	07d2      	lsls	r2, r2, #31
 8001e96:	d4ed      	bmi.n	8001e74 <HAL_SPI_Receive+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e98:	f7fe fe06 	bl	8000aa8 <HAL_GetTick>
 8001e9c:	e7f4      	b.n	8001e88 <HAL_SPI_Receive+0xa8>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e9e:	6883      	ldr	r3, [r0, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1a8      	bne.n	8001df6 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ea4:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001ea6:	9600      	str	r6, [sp, #0]
 8001ea8:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001eaa:	f880 5051 	strb.w	r5, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001eae:	460a      	mov	r2, r1
 8001eb0:	f7ff fde4 	bl	8001a7c <HAL_SPI_TransmitReceive>
}
 8001eb4:	b002      	add	sp, #8
 8001eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8001eba:	2002      	movs	r0, #2
}
 8001ebc:	b002      	add	sp, #8
 8001ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ec2:	1c77      	adds	r7, r6, #1
 8001ec4:	d126      	bne.n	8001f14 <HAL_SPI_Receive+0x134>
    while (hspi->RxXferCount > 0U)
 8001ec6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	b17a      	cbz	r2, 8001eec <HAL_SPI_Receive+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	07d0      	lsls	r0, r2, #31
 8001ed0:	d553      	bpl.n	8001f7a <HAL_SPI_Receive+0x19a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ed2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8001eda:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001edc:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001ede:	3a01      	subs	r2, #1
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001ee4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	d1ef      	bne.n	8001ecc <HAL_SPI_Receive+0xec>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eec:	6862      	ldr	r2, [r4, #4]
 8001eee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001ef2:	d06d      	beq.n	8001fd0 <HAL_SPI_Receive+0x1f0>
 8001ef4:	1c71      	adds	r1, r6, #1
 8001ef6:	d144      	bne.n	8001f82 <HAL_SPI_Receive+0x1a2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	07d2      	lsls	r2, r2, #31
 8001efc:	d4fc      	bmi.n	8001ef8 <HAL_SPI_Receive+0x118>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001f00:	3000      	adds	r0, #0
 8001f02:	bf18      	it	ne
 8001f04:	2001      	movne	r0, #1
error :
 8001f06:	e786      	b.n	8001e16 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f08:	f7fe fdce 	bl	8000aa8 <HAL_GetTick>
 8001f0c:	1b40      	subs	r0, r0, r5
 8001f0e:	42b0      	cmp	r0, r6
 8001f10:	d22c      	bcs.n	8001f6c <HAL_SPI_Receive+0x18c>
 8001f12:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 8001f14:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001f16:	b292      	uxth	r2, r2
 8001f18:	2a00      	cmp	r2, #0
 8001f1a:	d0e7      	beq.n	8001eec <HAL_SPI_Receive+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	07d0      	lsls	r0, r2, #31
 8001f20:	d5f2      	bpl.n	8001f08 <HAL_SPI_Receive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8001f2a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f2c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001f2e:	3a01      	subs	r2, #1
 8001f30:	b292      	uxth	r2, r2
 8001f32:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001f34:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001f36:	b292      	uxth	r2, r2
 8001f38:	2a00      	cmp	r2, #0
 8001f3a:	d1ef      	bne.n	8001f1c <HAL_SPI_Receive+0x13c>
 8001f3c:	e7d6      	b.n	8001eec <HAL_SPI_Receive+0x10c>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f40:	7b1b      	ldrb	r3, [r3, #12]
 8001f42:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8001f44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f4c:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8001f4e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f50:	63a2      	str	r2, [r4, #56]	; 0x38
 8001f52:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 8001f54:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001f56:	b292      	uxth	r2, r2
 8001f58:	2a00      	cmp	r2, #0
 8001f5a:	d0c7      	beq.n	8001eec <HAL_SPI_Receive+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	07d7      	lsls	r7, r2, #31
 8001f60:	d4ed      	bmi.n	8001f3e <HAL_SPI_Receive+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f62:	f7fe fda1 	bl	8000aa8 <HAL_GetTick>
 8001f66:	1b40      	subs	r0, r0, r5
 8001f68:	42b0      	cmp	r0, r6
 8001f6a:	d3f2      	bcc.n	8001f52 <HAL_SPI_Receive+0x172>
          errorcode = HAL_TIMEOUT;
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	e752      	b.n	8001e16 <HAL_SPI_Receive+0x36>
    SPI_1LINE_RX(hspi);
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e770      	b.n	8001e5c <HAL_SPI_Receive+0x7c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f7a:	f7fe fd95 	bl	8000aa8 <HAL_GetTick>
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	e7a1      	b.n	8001ec6 <HAL_SPI_Receive+0xe6>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	07db      	lsls	r3, r3, #31
 8001f86:	d5ba      	bpl.n	8001efe <HAL_SPI_Receive+0x11e>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001f88:	f7fe fd8e 	bl	8000aa8 <HAL_GetTick>
 8001f8c:	1b40      	subs	r0, r0, r5
 8001f8e:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f90:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001f92:	d8af      	bhi.n	8001ef4 <HAL_SPI_Receive+0x114>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f94:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f96:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f98:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fa0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa2:	d046      	beq.n	8002032 <HAL_SPI_Receive+0x252>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fa4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001fa6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001faa:	d107      	bne.n	8001fbc <HAL_SPI_Receive+0x1dc>
          SPI_RESET_CRC(hspi);
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fba:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fc4:	f043 0320 	orr.w	r3, r3, #32
 8001fc8:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	6563      	str	r3, [r4, #84]	; 0x54
 8001fce:	e796      	b.n	8001efe <HAL_SPI_Receive+0x11e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fd0:	68a2      	ldr	r2, [r4, #8]
 8001fd2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001fd6:	d012      	beq.n	8001ffe <HAL_SPI_Receive+0x21e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fd8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001fdc:	d014      	beq.n	8002008 <HAL_SPI_Receive+0x228>
 8001fde:	1c71      	adds	r1, r6, #1
 8001fe0:	d103      	bne.n	8001fea <HAL_SPI_Receive+0x20a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	0612      	lsls	r2, r2, #24
 8001fe6:	d4fc      	bmi.n	8001fe2 <HAL_SPI_Receive+0x202>
 8001fe8:	e789      	b.n	8001efe <HAL_SPI_Receive+0x11e>
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	d586      	bpl.n	8001efe <HAL_SPI_Receive+0x11e>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ff0:	f7fe fd5a 	bl	8000aa8 <HAL_GetTick>
 8001ff4:	1b40      	subs	r0, r0, r5
 8001ff6:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ff8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ffa:	d8f0      	bhi.n	8001fde <HAL_SPI_Receive+0x1fe>
 8001ffc:	e7ca      	b.n	8001f94 <HAL_SPI_Receive+0x1b4>
    __HAL_SPI_DISABLE(hspi);
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e7ea      	b.n	8001fde <HAL_SPI_Receive+0x1fe>
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	1c77      	adds	r7, r6, #1
 8002012:	d103      	bne.n	800201c <HAL_SPI_Receive+0x23c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	07d5      	lsls	r5, r2, #31
 8002018:	d4fc      	bmi.n	8002014 <HAL_SPI_Receive+0x234>
 800201a:	e770      	b.n	8001efe <HAL_SPI_Receive+0x11e>
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	07d8      	lsls	r0, r3, #31
 8002020:	f57f af6d 	bpl.w	8001efe <HAL_SPI_Receive+0x11e>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002024:	f7fe fd40 	bl	8000aa8 <HAL_GetTick>
 8002028:	1b40      	subs	r0, r0, r5
 800202a:	4286      	cmp	r6, r0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800202c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800202e:	d8ef      	bhi.n	8002010 <HAL_SPI_Receive+0x230>
 8002030:	e7b0      	b.n	8001f94 <HAL_SPI_Receive+0x1b4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002032:	68a2      	ldr	r2, [r4, #8]
 8002034:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002038:	d002      	beq.n	8002040 <HAL_SPI_Receive+0x260>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800203a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800203e:	d1b1      	bne.n	8001fa4 <HAL_SPI_Receive+0x1c4>
          __HAL_SPI_DISABLE(hspi);
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e7ac      	b.n	8001fa4 <HAL_SPI_Receive+0x1c4>
 800204a:	bf00      	nop

0800204c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800204c:	2800      	cmp	r0, #0
 800204e:	f000 80c8 	beq.w	80021e2 <HAL_UART_Init+0x196>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002052:	6982      	ldr	r2, [r0, #24]
 8002054:	6803      	ldr	r3, [r0, #0]
{
 8002056:	b570      	push	{r4, r5, r6, lr}
 8002058:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800205a:	2a00      	cmp	r2, #0
 800205c:	f000 80ad 	beq.w	80021ba <HAL_UART_Init+0x16e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002060:	498a      	ldr	r1, [pc, #552]	; (800228c <HAL_UART_Init+0x240>)
 8002062:	428b      	cmp	r3, r1
 8002064:	f000 8101 	beq.w	800226a <HAL_UART_Init+0x21e>
 8002068:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 800206c:	428b      	cmp	r3, r1
 800206e:	f000 80fc 	beq.w	800226a <HAL_UART_Init+0x21e>
 8002072:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8002076:	428b      	cmp	r3, r1
 8002078:	f000 80f7 	beq.w	800226a <HAL_UART_Init+0x21e>
 800207c:	f240 114b 	movw	r1, #331	; 0x14b
 8002080:	4883      	ldr	r0, [pc, #524]	; (8002290 <HAL_UART_Init+0x244>)
 8002082:	f7fe fbb3 	bl	80007ec <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002086:	69a2      	ldr	r2, [r4, #24]
 8002088:	2a00      	cmp	r2, #0
 800208a:	f040 80ee 	bne.w	800226a <HAL_UART_Init+0x21e>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800208e:	68a3      	ldr	r3, [r4, #8]
 8002090:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002094:	d004      	beq.n	80020a0 <HAL_UART_Init+0x54>
 8002096:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800209a:	487d      	ldr	r0, [pc, #500]	; (8002290 <HAL_UART_Init+0x244>)
 800209c:	f7fe fba6 	bl	80007ec <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80020a0:	69e3      	ldr	r3, [r4, #28]
 80020a2:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80020a6:	d004      	beq.n	80020b2 <HAL_UART_Init+0x66>
 80020a8:	f240 1153 	movw	r1, #339	; 0x153
 80020ac:	4878      	ldr	r0, [pc, #480]	; (8002290 <HAL_UART_Init+0x244>)
 80020ae:	f7fe fb9d 	bl	80007ec <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80020b2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80020b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80c6 	beq.w	800224c <HAL_UART_Init+0x200>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c0:	2324      	movs	r3, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80020c8:	68d3      	ldr	r3, [r2, #12]
{
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80020ca:	6860      	ldr	r0, [r4, #4]
 80020cc:	4971      	ldr	r1, [pc, #452]	; (8002294 <HAL_UART_Init+0x248>)
  __HAL_UART_DISABLE(huart);
 80020ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80020d2:	4288      	cmp	r0, r1
  __HAL_UART_DISABLE(huart);
 80020d4:	60d3      	str	r3, [r2, #12]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80020d6:	f200 80b3 	bhi.w	8002240 <HAL_UART_Init+0x1f4>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80020da:	68e3      	ldr	r3, [r4, #12]
 80020dc:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80020e0:	d004      	beq.n	80020ec <HAL_UART_Init+0xa0>
 80020e2:	f640 31fc 	movw	r1, #3068	; 0xbfc
 80020e6:	486a      	ldr	r0, [pc, #424]	; (8002290 <HAL_UART_Init+0x244>)
 80020e8:	f7fe fb80 	bl	80007ec <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80020ec:	6923      	ldr	r3, [r4, #16]
 80020ee:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80020f2:	d003      	beq.n	80020fc <HAL_UART_Init+0xb0>
 80020f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80020f8:	f040 80ae 	bne.w	8002258 <HAL_UART_Init+0x20c>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80020fc:	6960      	ldr	r0, [r4, #20]
 80020fe:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8002102:	4218      	tst	r0, r3
 8002104:	d100      	bne.n	8002108 <HAL_UART_Init+0xbc>
 8002106:	b928      	cbnz	r0, 8002114 <HAL_UART_Init+0xc8>
 8002108:	4861      	ldr	r0, [pc, #388]	; (8002290 <HAL_UART_Init+0x244>)
 800210a:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800210e:	f7fe fb6d 	bl	80007ec <assert_failed>
 8002112:	6960      	ldr	r0, [r4, #20]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002114:	6822      	ldr	r2, [r4, #0]
 8002116:	68e5      	ldr	r5, [r4, #12]
 8002118:	6911      	ldr	r1, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 800211a:	68a3      	ldr	r3, [r4, #8]
 800211c:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800211e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002122:	4329      	orrs	r1, r5
 8002124:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002126:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002128:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800212a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800212e:	4333      	orrs	r3, r6
 8002130:	f021 010c 	bic.w	r1, r1, #12
 8002134:	432b      	orrs	r3, r5
 8002136:	430b      	orrs	r3, r1
 8002138:	4303      	orrs	r3, r0
 800213a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800213c:	6953      	ldr	r3, [r2, #20]
 800213e:	69a1      	ldr	r1, [r4, #24]
 8002140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002144:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002146:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800214a:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800214c:	4b4f      	ldr	r3, [pc, #316]	; (800228c <HAL_UART_Init+0x240>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800214e:	d04a      	beq.n	80021e6 <HAL_UART_Init+0x19a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002150:	429a      	cmp	r2, r3
 8002152:	d072      	beq.n	800223a <HAL_UART_Init+0x1ee>
 8002154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002158:	429a      	cmp	r2, r3
 800215a:	d06e      	beq.n	800223a <HAL_UART_Init+0x1ee>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800215c:	f7ff fa40 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002160:	6863      	ldr	r3, [r4, #4]
 8002162:	4d4d      	ldr	r5, [pc, #308]	; (8002298 <HAL_UART_Init+0x24c>)
 8002164:	2219      	movs	r2, #25
 8002166:	fba0 0102 	umull	r0, r1, r0, r2
 800216a:	009a      	lsls	r2, r3, #2
 800216c:	0f9b      	lsrs	r3, r3, #30
 800216e:	f7fe f831 	bl	80001d4 <__aeabi_uldivmod>
 8002172:	fba5 2100 	umull	r2, r1, r5, r0
 8002176:	0949      	lsrs	r1, r1, #5
 8002178:	2264      	movs	r2, #100	; 0x64
 800217a:	fb02 0211 	mls	r2, r2, r1, r0
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	3232      	adds	r2, #50	; 0x32
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	fba5 0202 	umull	r0, r2, r5, r2
 8002188:	0109      	lsls	r1, r1, #4
 800218a:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 800218e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002196:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800219e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021a0:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80021a4:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80021a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021aa:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80021ac:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ae:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021b0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021b4:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80021b8:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80021ba:	4a34      	ldr	r2, [pc, #208]	; (800228c <HAL_UART_Init+0x240>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	f43f af66 	beq.w	800208e <HAL_UART_Init+0x42>
 80021c2:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80021c6:	4293      	cmp	r3, r2
 80021c8:	f43f af61 	beq.w	800208e <HAL_UART_Init+0x42>
 80021cc:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 80021d0:	4293      	cmp	r3, r2
 80021d2:	f43f af5c 	beq.w	800208e <HAL_UART_Init+0x42>
 80021d6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80021da:	482d      	ldr	r0, [pc, #180]	; (8002290 <HAL_UART_Init+0x244>)
 80021dc:	f7fe fb06 	bl	80007ec <assert_failed>
 80021e0:	e755      	b.n	800208e <HAL_UART_Init+0x42>
    return HAL_ERROR;
 80021e2:	2001      	movs	r0, #1
}
 80021e4:	4770      	bx	lr
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d03c      	beq.n	8002264 <HAL_UART_Init+0x218>
 80021ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d038      	beq.n	8002264 <HAL_UART_Init+0x218>
      pclk = HAL_RCC_GetPCLK1Freq();
 80021f2:	f7ff f9f5 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021f6:	6862      	ldr	r2, [r4, #4]
 80021f8:	2600      	movs	r6, #0
 80021fa:	1892      	adds	r2, r2, r2
 80021fc:	f04f 0119 	mov.w	r1, #25
 8002200:	eb46 0306 	adc.w	r3, r6, r6
 8002204:	fba0 0101 	umull	r0, r1, r0, r1
 8002208:	f7fd ffe4 	bl	80001d4 <__aeabi_uldivmod>
 800220c:	4e22      	ldr	r6, [pc, #136]	; (8002298 <HAL_UART_Init+0x24c>)
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	fba6 2100 	umull	r2, r1, r6, r0
 8002214:	094d      	lsrs	r5, r1, #5
 8002216:	2264      	movs	r2, #100	; 0x64
 8002218:	fb02 0215 	mls	r2, r2, r5, r0
 800221c:	00d2      	lsls	r2, r2, #3
 800221e:	3232      	adds	r2, #50	; 0x32
 8002220:	fba6 1202 	umull	r1, r2, r6, r2
 8002224:	0952      	lsrs	r2, r2, #5
 8002226:	f002 0107 	and.w	r1, r2, #7
 800222a:	0052      	lsls	r2, r2, #1
 800222c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8002230:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002234:	440a      	add	r2, r1
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e7aa      	b.n	8002190 <HAL_UART_Init+0x144>
      pclk = HAL_RCC_GetPCLK2Freq();
 800223a:	f7ff f9e1 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 800223e:	e78f      	b.n	8002160 <HAL_UART_Init+0x114>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002240:	f640 31fb 	movw	r1, #3067	; 0xbfb
 8002244:	4812      	ldr	r0, [pc, #72]	; (8002290 <HAL_UART_Init+0x244>)
 8002246:	f7fe fad1 	bl	80007ec <assert_failed>
 800224a:	e746      	b.n	80020da <HAL_UART_Init+0x8e>
    huart->Lock = HAL_UNLOCKED;
 800224c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002250:	4620      	mov	r0, r4
 8002252:	f7fe fb81 	bl	8000958 <HAL_UART_MspInit>
 8002256:	e733      	b.n	80020c0 <HAL_UART_Init+0x74>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002258:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <HAL_UART_Init+0x244>)
 800225e:	f7fe fac5 	bl	80007ec <assert_failed>
 8002262:	e74b      	b.n	80020fc <HAL_UART_Init+0xb0>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002264:	f7ff f9cc 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 8002268:	e7c5      	b.n	80021f6 <HAL_UART_Init+0x1aa>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800226a:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 800226e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002272:	f43f af0c 	beq.w	800208e <HAL_UART_Init+0x42>
 8002276:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800227a:	f43f af08 	beq.w	800208e <HAL_UART_Init+0x42>
 800227e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <HAL_UART_Init+0x244>)
 8002284:	f7fe fab2 	bl	80007ec <assert_failed>
 8002288:	e701      	b.n	800208e <HAL_UART_Init+0x42>
 800228a:	bf00      	nop
 800228c:	40011000 	.word	0x40011000
 8002290:	080029d8 	.word	0x080029d8
 8002294:	00a037a0 	.word	0x00a037a0
 8002298:	51eb851f 	.word	0x51eb851f

0800229c <TMC5160_Run>:
static uint32_t vmax_position;
static uint16_t vref; // mV

// Rotate with a given velocity (to the right)
void TMC5160_Run(TMC5160TypeDef *handle, int32_t velocity)
{
 800229c:	b538      	push	{r3, r4, r5, lr}
	// Set absolute velocity
	TMC5160_Write_Register(handle, TMC5160_VMAX, abs(velocity));
 800229e:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
 80022a2:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
{
 80022a6:	460c      	mov	r4, r1
	TMC5160_Write_Register(handle, TMC5160_VMAX, abs(velocity));
 80022a8:	2127      	movs	r1, #39	; 0x27
{
 80022aa:	4605      	mov	r5, r0
	TMC5160_Write_Register(handle, TMC5160_VMAX, abs(velocity));
 80022ac:	f000 f9c6 	bl	800263c <TMC5160_Write_Register>
	// Set direction
	TMC5160_Write_Register(handle, TMC5160_RAMPMODE, (velocity >= 0) ? TMC5160_MODE_VELPOS : TMC5160_MODE_VELNEG);
 80022b0:	2c00      	cmp	r4, #0
 80022b2:	4628      	mov	r0, r5
 80022b4:	bfac      	ite	ge
 80022b6:	2201      	movge	r2, #1
 80022b8:	2202      	movlt	r2, #2
 80022ba:	2120      	movs	r1, #32
}
 80022bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC5160_Write_Register(handle, TMC5160_RAMPMODE, (velocity >= 0) ? TMC5160_MODE_VELPOS : TMC5160_MODE_VELNEG);
 80022c0:	f000 b9bc 	b.w	800263c <TMC5160_Write_Register>

080022c4 <TMC5160_Set_VEL_MAX>:
{
	return vmax_position;
}

void TMC5160_Set_VEL_MAX(TMC5160TypeDef *handle, int32_t value)
{
 80022c4:	b538      	push	{r3, r4, r5, lr}
	vmax_position = abs(value);
 80022c6:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80022ca:	4c08      	ldr	r4, [pc, #32]	; (80022ec <TMC5160_Set_VEL_MAX+0x28>)
 80022cc:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
	if (TMC5160_Read_Register(handle, TMC5160_RAMPMODE) == TMC5160_MODE_POSITION)
 80022d0:	2120      	movs	r1, #32
	vmax_position = abs(value);
 80022d2:	6023      	str	r3, [r4, #0]
{
 80022d4:	4605      	mov	r5, r0
	if (TMC5160_Read_Register(handle, TMC5160_RAMPMODE) == TMC5160_MODE_POSITION)
 80022d6:	f000 fa4b 	bl	8002770 <TMC5160_Read_Register>
 80022da:	b100      	cbz	r0, 80022de <TMC5160_Set_VEL_MAX+0x1a>
		TMC5160_Write_Register(handle, TMC5160_VMAX, vmax_position);
}
 80022dc:	bd38      	pop	{r3, r4, r5, pc}
		TMC5160_Write_Register(handle, TMC5160_VMAX, vmax_position);
 80022de:	6822      	ldr	r2, [r4, #0]
 80022e0:	4628      	mov	r0, r5
 80022e2:	2127      	movs	r1, #39	; 0x27
}
 80022e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TMC5160_Write_Register(handle, TMC5160_VMAX, vmax_position);
 80022e8:	f000 b9a8 	b.w	800263c <TMC5160_Write_Register>
 80022ec:	20000028 	.word	0x20000028

080022f0 <TMC5160_Set_ACC_MAX>:
	return TMC5160_Read_Register(handle, TMC5160_AMAX);
}

void TMC5160_Set_ACC_MAX(TMC5160TypeDef *handle, int32_t value)
{
	TMC5160_Write_Register(handle, TMC5160_AMAX, value);
 80022f0:	460a      	mov	r2, r1
 80022f2:	2126      	movs	r1, #38	; 0x26
 80022f4:	f000 b9a2 	b.w	800263c <TMC5160_Write_Register>

080022f8 <TMC5160_Set_I_MAX>:
{
	return TMC5160_FIELD_READ(handle, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT);
}

void TMC5160_Set_I_MAX(TMC5160TypeDef *handle, int32_t value)
{
 80022f8:	b538      	push	{r3, r4, r5, lr}
 80022fa:	460c      	mov	r4, r1
	TMC5160_FIELD_WRITE(handle, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT, value);
 80022fc:	2110      	movs	r1, #16
{
 80022fe:	4605      	mov	r5, r0
	TMC5160_FIELD_WRITE(handle, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT, value);
 8002300:	f000 fa36 	bl	8002770 <TMC5160_Read_Register>
 8002304:	0224      	lsls	r4, r4, #8
 8002306:	f420 52f8 	bic.w	r2, r0, #7936	; 0x1f00
 800230a:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
 800230e:	4322      	orrs	r2, r4
 8002310:	4628      	mov	r0, r5
 8002312:	2110      	movs	r1, #16
}
 8002314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC5160_FIELD_WRITE(handle, TMC5160_IHOLD_IRUN, TMC5160_IRUN_MASK, TMC5160_IRUN_SHIFT, value);
 8002318:	f000 b990 	b.w	800263c <TMC5160_Write_Register>

0800231c <TMC5160_Set_I_STBY>:
{
	return TMC5160_FIELD_READ(handle, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT);
}

void TMC5160_Set_I_STBY(TMC5160TypeDef *handle, int32_t value)
{
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	460c      	mov	r4, r1
	TMC5160_FIELD_WRITE(handle, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT, value);
 8002320:	2110      	movs	r1, #16
{
 8002322:	4605      	mov	r5, r0
	TMC5160_FIELD_WRITE(handle, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT, value);
 8002324:	f000 fa24 	bl	8002770 <TMC5160_Read_Register>
 8002328:	f004 041f 	and.w	r4, r4, #31
 800232c:	f020 021f 	bic.w	r2, r0, #31
 8002330:	4322      	orrs	r2, r4
 8002332:	4628      	mov	r0, r5
 8002334:	2110      	movs	r1, #16
}
 8002336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC5160_FIELD_WRITE(handle, TMC5160_IHOLD_IRUN, TMC5160_IHOLD_MASK, TMC5160_IHOLD_SHIFT, value);
 800233a:	f000 b97f 	b.w	800263c <TMC5160_Write_Register>
 800233e:	bf00      	nop

08002340 <TMC5160_Set_Auto_Right_Stop>:
{
	return (TMC5160_Read_Register(handle, TMC5160_SWMODE) & TMC5160_SW_STOPR_ENABLE) ? 1 : 0;
}

void TMC5160_Set_Auto_Right_Stop(TMC5160TypeDef *handle, int32_t value)
{
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	460d      	mov	r5, r1
	int32_t buffer = TMC5160_Read_Register(handle, TMC5160_SWMODE);
 8002344:	2134      	movs	r1, #52	; 0x34
{
 8002346:	4604      	mov	r4, r0
	int32_t buffer = TMC5160_Read_Register(handle, TMC5160_SWMODE);
 8002348:	f000 fa12 	bl	8002770 <TMC5160_Read_Register>
	if (value == 0)
 800234c:	b13d      	cbz	r5, 800235e <TMC5160_Set_Auto_Right_Stop+0x1e>
		TMC5160_Write_Register(handle, TMC5160_SWMODE, buffer | TMC5160_SW_STOPR_ENABLE);
	else
		TMC5160_Write_Register(handle, TMC5160_SWMODE, buffer & ~TMC5160_SW_STOPR_ENABLE);
 800234e:	f020 0202 	bic.w	r2, r0, #2
 8002352:	2134      	movs	r1, #52	; 0x34
 8002354:	4620      	mov	r0, r4
}
 8002356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TMC5160_Write_Register(handle, TMC5160_SWMODE, buffer & ~TMC5160_SW_STOPR_ENABLE);
 800235a:	f000 b96f 	b.w	800263c <TMC5160_Write_Register>
		TMC5160_Write_Register(handle, TMC5160_SWMODE, buffer | TMC5160_SW_STOPR_ENABLE);
 800235e:	f040 0202 	orr.w	r2, r0, #2
 8002362:	2134      	movs	r1, #52	; 0x34
 8002364:	4620      	mov	r0, r4
}
 8002366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TMC5160_Write_Register(handle, TMC5160_SWMODE, buffer | TMC5160_SW_STOPR_ENABLE);
 800236a:	f000 b967 	b.w	800263c <TMC5160_Write_Register>
 800236e:	bf00      	nop

08002370 <TMC5160_Set_Auto_Left_Stop>:
{
	return (TMC5160_Read_Register(handle, TMC5160_SWMODE) & TMC5160_SW_STOPL_ENABLE) ? 1 : 0;
}

void TMC5160_Set_Auto_Left_Stop(TMC5160TypeDef *handle, int32_t value)
{
 8002370:	b538      	push	{r3, r4, r5, lr}
 8002372:	460d      	mov	r5, r1
	int32_t buffer = TMC5160_Read_Register(handle, TMC5160_SWMODE);
 8002374:	2134      	movs	r1, #52	; 0x34
{
 8002376:	4604      	mov	r4, r0
	int32_t buffer = TMC5160_Read_Register(handle, TMC5160_SWMODE);
 8002378:	f000 f9fa 	bl	8002770 <TMC5160_Read_Register>
	if (value == 0)
 800237c:	b13d      	cbz	r5, 800238e <TMC5160_Set_Auto_Left_Stop+0x1e>
		TMC5160_Write_Register(handle, TMC5160_SWMODE, buffer | TMC5160_SW_STOPL_ENABLE);
	else
		TMC5160_Write_Register(handle, TMC5160_SWMODE, buffer & ~TMC5160_SW_STOPL_ENABLE);
 800237e:	f020 0201 	bic.w	r2, r0, #1
 8002382:	2134      	movs	r1, #52	; 0x34
 8002384:	4620      	mov	r0, r4
}
 8002386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TMC5160_Write_Register(handle, TMC5160_SWMODE, buffer & ~TMC5160_SW_STOPL_ENABLE);
 800238a:	f000 b957 	b.w	800263c <TMC5160_Write_Register>
		TMC5160_Write_Register(handle, TMC5160_SWMODE, buffer | TMC5160_SW_STOPL_ENABLE);
 800238e:	f040 0201 	orr.w	r2, r0, #1
 8002392:	2134      	movs	r1, #52	; 0x34
 8002394:	4620      	mov	r0, r4
}
 8002396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TMC5160_Write_Register(handle, TMC5160_SWMODE, buffer | TMC5160_SW_STOPL_ENABLE);
 800239a:	f000 b94f 	b.w	800263c <TMC5160_Write_Register>
 800239e:	bf00      	nop

080023a0 <TMC5160_Set_ACC_A1>:
	return TMC5160_Read_Register(handle, TMC5160_A1);
}

void TMC5160_Set_ACC_A1(TMC5160TypeDef *handle, int32_t value)
{
	TMC5160_Write_Register(handle, TMC5160_A1, value);
 80023a0:	460a      	mov	r2, r1
 80023a2:	2124      	movs	r1, #36	; 0x24
 80023a4:	f000 b94a 	b.w	800263c <TMC5160_Write_Register>

080023a8 <TMC5160_Set_VEL_V1>:
	return TMC5160_Read_Register(handle, TMC5160_V1);
}

void TMC5160_Set_VEL_V1(TMC5160TypeDef *handle, int32_t value)
{
	TMC5160_Write_Register(handle, TMC5160_V1, value);
 80023a8:	460a      	mov	r2, r1
 80023aa:	2125      	movs	r1, #37	; 0x25
 80023ac:	f000 b946 	b.w	800263c <TMC5160_Write_Register>

080023b0 <TMC5160_Set_DEC_MAX>:
	return TMC5160_Read_Register(handle, TMC5160_DMAX);
}

void TMC5160_Set_DEC_MAX(TMC5160TypeDef *handle, int32_t value)
{
	TMC5160_Write_Register(handle, TMC5160_DMAX, value);
 80023b0:	460a      	mov	r2, r1
 80023b2:	2128      	movs	r1, #40	; 0x28
 80023b4:	f000 b942 	b.w	800263c <TMC5160_Write_Register>

080023b8 <TMC5160_Set_DEC_D1>:
	return TMC5160_Read_Register(handle, TMC5160_D1);
}

void TMC5160_Set_DEC_D1(TMC5160TypeDef *handle, int32_t value)
{
	TMC5160_Write_Register(handle, TMC5160_D1, value);
 80023b8:	460a      	mov	r2, r1
 80023ba:	212a      	movs	r1, #42	; 0x2a
 80023bc:	f000 b93e 	b.w	800263c <TMC5160_Write_Register>

080023c0 <TMC5160_Set_VEL_Start>:
	return TMC5160_Read_Register(handle, TMC5160_VSTART);
}

void TMC5160_Set_VEL_Start(TMC5160TypeDef *handle, int32_t value)
{
	TMC5160_Write_Register(handle, TMC5160_VSTART, value);
 80023c0:	460a      	mov	r2, r1
 80023c2:	2123      	movs	r1, #35	; 0x23
 80023c4:	f000 b93a 	b.w	800263c <TMC5160_Write_Register>

080023c8 <TMC5160_Set_VEL_Stop>:
	return TMC5160_Read_Register(handle, TMC5160_VSTOP);
}

void TMC5160_Set_VEL_Stop(TMC5160TypeDef *handle, int32_t value)
{
	TMC5160_Write_Register(handle, TMC5160_VSTOP, value);
 80023c8:	460a      	mov	r2, r1
 80023ca:	212b      	movs	r1, #43	; 0x2b
 80023cc:	f000 b936 	b.w	800263c <TMC5160_Write_Register>

080023d0 <TMC5160_Set_SE_HSpeed_THRESH>:
	return MIN(0xFFFFF, (1 << 24) / ((buffer) ? buffer : 1));
}

void TMC5160_Set_SE_HSpeed_THRESH(TMC5160TypeDef *handle, int32_t value)
{
	int32_t tmp = MIN(0xFFFFF, (1 << 24) / ((value) ? value : 1));
 80023d0:	b151      	cbz	r1, 80023e8 <TMC5160_Set_SE_HSpeed_THRESH+0x18>
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <TMC5160_Set_SE_HSpeed_THRESH+0x20>)
 80023d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023d8:	fb92 f2f1 	sdiv	r2, r2, r1
 80023dc:	429a      	cmp	r2, r3
 80023de:	bfa8      	it	ge
 80023e0:	461a      	movge	r2, r3
	TMC5160_Write_Register(handle, TMC5160_THIGH, tmp);
 80023e2:	2115      	movs	r1, #21
 80023e4:	f000 b92a 	b.w	800263c <TMC5160_Write_Register>
	int32_t tmp = MIN(0xFFFFF, (1 << 24) / ((value) ? value : 1));
 80023e8:	4a01      	ldr	r2, [pc, #4]	; (80023f0 <TMC5160_Set_SE_HSpeed_THRESH+0x20>)
	TMC5160_Write_Register(handle, TMC5160_THIGH, tmp);
 80023ea:	2115      	movs	r1, #21
 80023ec:	f000 b926 	b.w	800263c <TMC5160_Write_Register>
 80023f0:	000fffff 	.word	0x000fffff

080023f4 <TMC5160_Set_Microstep_Resolution>:
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop

080023f8 <TMC5160_Set_Chopper_Blank_Time>:
{
	return TMC5160_FIELD_READ(handle, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT);
}

void TMC5160_Set_Chopper_Blank_Time(TMC5160TypeDef *handle, int32_t value)
{
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	460c      	mov	r4, r1
	TMC5160_FIELD_WRITE(handle, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT, value);
 80023fc:	216c      	movs	r1, #108	; 0x6c
{
 80023fe:	4605      	mov	r5, r0
	TMC5160_FIELD_WRITE(handle, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT, value);
 8002400:	f000 f9b6 	bl	8002770 <TMC5160_Read_Register>
 8002404:	03e4      	lsls	r4, r4, #15
 8002406:	f420 32c0 	bic.w	r2, r0, #98304	; 0x18000
 800240a:	f404 34c0 	and.w	r4, r4, #98304	; 0x18000
 800240e:	4322      	orrs	r2, r4
 8002410:	4628      	mov	r0, r5
 8002412:	216c      	movs	r1, #108	; 0x6c
}
 8002414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC5160_FIELD_WRITE(handle, TMC5160_CHOPCONF, TMC5160_TBL_MASK, TMC5160_TBL_SHIFT, value);
 8002418:	f000 b910 	b.w	800263c <TMC5160_Write_Register>

0800241c <TMC5160_Set_Chopper_TOff>:
{
	return TMC5160_FIELD_READ(handle, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT);
}

void TMC5160_Set_Chopper_TOff(TMC5160TypeDef *handle, int32_t value)
{
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	460c      	mov	r4, r1
	TMC5160_FIELD_WRITE(handle, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT, value);
 8002420:	216c      	movs	r1, #108	; 0x6c
{
 8002422:	4605      	mov	r5, r0
	TMC5160_FIELD_WRITE(handle, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT, value);
 8002424:	f000 f9a4 	bl	8002770 <TMC5160_Read_Register>
 8002428:	f004 040f 	and.w	r4, r4, #15
 800242c:	f020 020f 	bic.w	r2, r0, #15
 8002430:	4322      	orrs	r2, r4
 8002432:	4628      	mov	r0, r5
 8002434:	216c      	movs	r1, #108	; 0x6c
}
 8002436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC5160_FIELD_WRITE(handle, TMC5160_CHOPCONF, TMC5160_TOFF_MASK, TMC5160_TOFF_SHIFT, value);
 800243a:	f000 b8ff 	b.w	800263c <TMC5160_Write_Register>
 800243e:	bf00      	nop

08002440 <TMC5160_Set_SE_I_MIN>:
{
	return TMC5160_FIELD_READ(handle, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT);
}

void TMC5160_Set_SE_I_MIN(TMC5160TypeDef *handle, int32_t value)
{
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	460c      	mov	r4, r1
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT, value);
 8002444:	216d      	movs	r1, #109	; 0x6d
{
 8002446:	4605      	mov	r5, r0
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT, value);
 8002448:	f000 f992 	bl	8002770 <TMC5160_Read_Register>
 800244c:	03e4      	lsls	r4, r4, #15
 800244e:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
 8002452:	b2a4      	uxth	r4, r4
 8002454:	4322      	orrs	r2, r4
 8002456:	4628      	mov	r0, r5
 8002458:	216d      	movs	r1, #109	; 0x6d
}
 800245a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SEIMIN_MASK, TMC5160_SEIMIN_SHIFT, value);
 800245e:	f000 b8ed 	b.w	800263c <TMC5160_Write_Register>
 8002462:	bf00      	nop

08002464 <TMC5160_Set_SE_I_DWN_Step>:
{
	return TMC5160_FIELD_READ(handle, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT);
}

void TMC5160_Set_SE_I_DWN_Step(TMC5160TypeDef *handle, int32_t value)
{
 8002464:	b538      	push	{r3, r4, r5, lr}
 8002466:	460c      	mov	r4, r1
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT, value);
 8002468:	216d      	movs	r1, #109	; 0x6d
{
 800246a:	4605      	mov	r5, r0
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT, value);
 800246c:	f000 f980 	bl	8002770 <TMC5160_Read_Register>
 8002470:	0364      	lsls	r4, r4, #13
 8002472:	f420 42c0 	bic.w	r2, r0, #24576	; 0x6000
 8002476:	f404 44c0 	and.w	r4, r4, #24576	; 0x6000
 800247a:	4322      	orrs	r2, r4
 800247c:	4628      	mov	r0, r5
 800247e:	216d      	movs	r1, #109	; 0x6d
}
 8002480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SEDN_MASK, TMC5160_SEDN_SHIFT, value);
 8002484:	f000 b8da 	b.w	800263c <TMC5160_Write_Register>

08002488 <TMC5160_Set_SE_HYS>:
{
	return TMC5160_FIELD_READ(handle, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT);
}

void TMC5160_Set_SE_HYS(TMC5160TypeDef *handle, int32_t value)
{
 8002488:	b538      	push	{r3, r4, r5, lr}
 800248a:	460c      	mov	r4, r1
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT, value);
 800248c:	216d      	movs	r1, #109	; 0x6d
{
 800248e:	4605      	mov	r5, r0
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT, value);
 8002490:	f000 f96e 	bl	8002770 <TMC5160_Read_Register>
 8002494:	0224      	lsls	r4, r4, #8
 8002496:	f420 6270 	bic.w	r2, r0, #3840	; 0xf00
 800249a:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 800249e:	4322      	orrs	r2, r4
 80024a0:	4628      	mov	r0, r5
 80024a2:	216d      	movs	r1, #109	; 0x6d
}
 80024a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SEMAX_MASK, TMC5160_SEMAX_SHIFT, value);
 80024a8:	f000 b8c8 	b.w	800263c <TMC5160_Write_Register>

080024ac <TMC5160_Set_stallGuard2_THRESH>:
	int32_t tmp = TMC5160_FIELD_READ(handle, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT);
	return CAST_Sn_TO_S32(tmp, 7);
}

void TMC5160_Set_stallGuard2_THRESH(TMC5160TypeDef *handle, int32_t value)
{
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	460c      	mov	r4, r1
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT, value);
 80024b0:	216d      	movs	r1, #109	; 0x6d
{
 80024b2:	4605      	mov	r5, r0
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT, value);
 80024b4:	f000 f95c 	bl	8002770 <TMC5160_Read_Register>
 80024b8:	0424      	lsls	r4, r4, #16
 80024ba:	f420 02fe 	bic.w	r2, r0, #8323072	; 0x7f0000
 80024be:	f404 04fe 	and.w	r4, r4, #8323072	; 0x7f0000
 80024c2:	4322      	orrs	r2, r4
 80024c4:	4628      	mov	r0, r5
 80024c6:	216d      	movs	r1, #109	; 0x6d
}
 80024c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TMC5160_FIELD_WRITE(handle, TMC5160_COOLCONF, TMC5160_SGT_MASK, TMC5160_SGT_SHIFT, value);
 80024cc:	f000 b8b6 	b.w	800263c <TMC5160_Write_Register>

080024d0 <TMC5160_Set_SE_Speed_THRESH>:
	return MIN(0xFFFFF, (1 << 24) / ((buffer) ? buffer : 1));
}

void TMC5160_Set_SE_Speed_THRESH(TMC5160TypeDef *handle, int32_t value)
{
	int32_t buffer = MIN(0xFFFFF, (1 << 24) / ((value) ? value : 1));
 80024d0:	b151      	cbz	r1, 80024e8 <TMC5160_Set_SE_Speed_THRESH+0x18>
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <TMC5160_Set_SE_Speed_THRESH+0x20>)
 80024d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024d8:	fb92 f2f1 	sdiv	r2, r2, r1
 80024dc:	429a      	cmp	r2, r3
 80024de:	bfa8      	it	ge
 80024e0:	461a      	movge	r2, r3
	TMC5160_Write_Register(handle, TMC5160_TCOOLTHRS, buffer);
 80024e2:	2114      	movs	r1, #20
 80024e4:	f000 b8aa 	b.w	800263c <TMC5160_Write_Register>
	int32_t buffer = MIN(0xFFFFF, (1 << 24) / ((value) ? value : 1));
 80024e8:	4a01      	ldr	r2, [pc, #4]	; (80024f0 <TMC5160_Set_SE_Speed_THRESH+0x20>)
	TMC5160_Write_Register(handle, TMC5160_TCOOLTHRS, buffer);
 80024ea:	2114      	movs	r1, #20
 80024ec:	f000 b8a6 	b.w	800263c <TMC5160_Write_Register>
 80024f0:	000fffff 	.word	0x000fffff

080024f4 <TMC5160_IO_Init>:
#include "TMC5160_io.h"
#include "TMC5160_Constants.h"
#include "RegisterAccess.h"

void TMC5160_IO_Init(TMC5160TypeDef *handle)
{
 80024f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // spi configured in cube @see spi.c
    // gpio configured in cube @see gpio.c

    HAL_GPIO_WritePin(TMC_EN_GPIO_Port, TMC_EN_Pin, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
{
 80024fa:	4680      	mov	r8, r0
 80024fc:	b083      	sub	sp, #12
    HAL_GPIO_WritePin(TMC_EN_GPIO_Port, TMC_EN_Pin, GPIO_PIN_RESET);
 80024fe:	2120      	movs	r1, #32
 8002500:	484b      	ldr	r0, [pc, #300]	; (8002630 <TMC5160_IO_Init+0x13c>)
 8002502:	f8df a134 	ldr.w	sl, [pc, #308]	; 8002638 <TMC5160_IO_Init+0x144>
    // register not readable -> shadow register copy
    if (!TMC_IS_READABLE(handle->registerAccess[address]))
        return handle->shadowRegister[address];

    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_RESET);
    HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 8002506:	4f4b      	ldr	r7, [pc, #300]	; (8002634 <TMC5160_IO_Init+0x140>)
    HAL_GPIO_WritePin(TMC_EN_GPIO_Port, TMC_EN_Pin, GPIO_PIN_RESET);
 8002508:	f7fe fc9e 	bl	8000e48 <HAL_GPIO_WritePin>
    for (size_t i = 0; i < TMC5160_REGISTER_COUNT; i++)
 800250c:	2600      	movs	r6, #0
 800250e:	f208 2907 	addw	r9, r8, #519	; 0x207
 8002512:	f108 0b08 	add.w	fp, r8, #8
        handle->registerAccess[i] = TMC5160_defaultRegisterAccess[i];
 8002516:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800251a:	f809 3f01 	strb.w	r3, [r9, #1]!
    uint8_t temp = 0x00;
 800251e:	f04f 0200 	mov.w	r2, #0
    if (!TMC_IS_READABLE(handle->registerAccess[address]))
 8002522:	07db      	lsls	r3, r3, #31
        uint8_t address = TMC_ADDRESS(i);
 8002524:	f88d 6006 	strb.w	r6, [sp, #6]
    uint8_t temp = 0x00;
 8002528:	f88d 2007 	strb.w	r2, [sp, #7]
    if (!TMC_IS_READABLE(handle->registerAccess[address]))
 800252c:	d407      	bmi.n	800253e <TMC5160_IO_Init+0x4a>
    for (size_t i = 0; i < TMC5160_REGISTER_COUNT; i++)
 800252e:	3601      	adds	r6, #1
 8002530:	2e80      	cmp	r6, #128	; 0x80
 8002532:	f10b 0b04 	add.w	fp, fp, #4
 8002536:	d1ee      	bne.n	8002516 <TMC5160_IO_Init+0x22>
}
 8002538:	b003      	add	sp, #12
 800253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_RESET);
 800253e:	2200      	movs	r2, #0
 8002540:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8002544:	f8d8 0000 	ldr.w	r0, [r8]
 8002548:	f7fe fc7e 	bl	8000e48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 800254c:	2364      	movs	r3, #100	; 0x64
 800254e:	2201      	movs	r2, #1
 8002550:	f10d 0106 	add.w	r1, sp, #6
 8002554:	4638      	mov	r0, r7
 8002556:	f7ff f95f 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 800255a:	f10d 0107 	add.w	r1, sp, #7
 800255e:	2364      	movs	r3, #100	; 0x64
 8002560:	2201      	movs	r2, #1
 8002562:	4638      	mov	r0, r7
 8002564:	f7ff f958 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002568:	f10d 0107 	add.w	r1, sp, #7
 800256c:	2364      	movs	r3, #100	; 0x64
 800256e:	2201      	movs	r2, #1
 8002570:	4638      	mov	r0, r7
 8002572:	f7ff f951 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002576:	f10d 0107 	add.w	r1, sp, #7
 800257a:	2364      	movs	r3, #100	; 0x64
 800257c:	2201      	movs	r2, #1
 800257e:	4638      	mov	r0, r7
 8002580:	f7ff f94a 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002584:	2364      	movs	r3, #100	; 0x64
 8002586:	f10d 0107 	add.w	r1, sp, #7
 800258a:	2201      	movs	r2, #1
 800258c:	4638      	mov	r0, r7
 800258e:	f7ff f943 	bl	8001818 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_SET);
 8002592:	2201      	movs	r2, #1
 8002594:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8002598:	f8d8 0000 	ldr.w	r0, [r8]
 800259c:	f7fe fc54 	bl	8000e48 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_RESET);
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80025a6:	f8d8 0000 	ldr.w	r0, [r8]
 80025aa:	f7fe fc4d 	bl	8000e48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 80025ae:	2364      	movs	r3, #100	; 0x64
 80025b0:	2201      	movs	r2, #1
 80025b2:	f10d 0106 	add.w	r1, sp, #6
 80025b6:	4638      	mov	r0, r7
 80025b8:	f7ff f92e 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 80025bc:	f10d 0107 	add.w	r1, sp, #7
 80025c0:	2364      	movs	r3, #100	; 0x64
 80025c2:	2201      	movs	r2, #1
 80025c4:	4638      	mov	r0, r7
 80025c6:	f7ff fc0b 	bl	8001de0 <HAL_SPI_Receive>
    val = temp << 24;
 80025ca:	f89d 4007 	ldrb.w	r4, [sp, #7]
    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 80025ce:	f10d 0107 	add.w	r1, sp, #7
 80025d2:	2364      	movs	r3, #100	; 0x64
 80025d4:	2201      	movs	r2, #1
 80025d6:	4638      	mov	r0, r7
 80025d8:	f7ff fc02 	bl	8001de0 <HAL_SPI_Receive>
    val |= temp << 16;
 80025dc:	f89d 5007 	ldrb.w	r5, [sp, #7]
    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 80025e0:	f10d 0107 	add.w	r1, sp, #7
 80025e4:	2364      	movs	r3, #100	; 0x64
 80025e6:	2201      	movs	r2, #1
 80025e8:	4638      	mov	r0, r7
 80025ea:	f7ff fbf9 	bl	8001de0 <HAL_SPI_Receive>
    val = temp << 24;
 80025ee:	0624      	lsls	r4, r4, #24
    val |= temp << 8;
    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 80025f0:	f10d 0107 	add.w	r1, sp, #7
 80025f4:	2364      	movs	r3, #100	; 0x64
 80025f6:	2201      	movs	r2, #1
 80025f8:	4638      	mov	r0, r7
    val |= temp << 16;
 80025fa:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    val |= temp << 8;
 80025fe:	f89d 5007 	ldrb.w	r5, [sp, #7]
    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 8002602:	f7ff fbed 	bl	8001de0 <HAL_SPI_Receive>
    val |= temp << 0;
 8002606:	f89d 3007 	ldrb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_SET);
 800260a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800260e:	f8d8 0000 	ldr.w	r0, [r8]
 8002612:	431c      	orrs	r4, r3
    val |= temp << 8;
 8002614:	022d      	lsls	r5, r5, #8
    for (size_t i = 0; i < TMC5160_REGISTER_COUNT; i++)
 8002616:	3601      	adds	r6, #1
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_SET);
 8002618:	2201      	movs	r2, #1
 800261a:	f7fe fc15 	bl	8000e48 <HAL_GPIO_WritePin>
    val |= temp << 0;
 800261e:	432c      	orrs	r4, r5
    for (size_t i = 0; i < TMC5160_REGISTER_COUNT; i++)
 8002620:	2e80      	cmp	r6, #128	; 0x80
        handle->shadowRegister[address] = TMC5160_Read_Register(handle, address);
 8002622:	f84b 4b04 	str.w	r4, [fp], #4
    for (size_t i = 0; i < TMC5160_REGISTER_COUNT; i++)
 8002626:	f47f af76 	bne.w	8002516 <TMC5160_IO_Init+0x22>
}
 800262a:	b003      	add	sp, #12
 800262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002630:	40020800 	.word	0x40020800
 8002634:	200002b4 	.word	0x200002b4
 8002638:	08002a13 	.word	0x08002a13

0800263c <TMC5160_Write_Register>:
{
 800263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002640:	b084      	sub	sp, #16
    address += TMC5160_WRITE_BIT;
 8002642:	f10d 0810 	add.w	r8, sp, #16
 8002646:	3980      	subs	r1, #128	; 0x80
    HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 8002648:	4f25      	ldr	r7, [pc, #148]	; (80026e0 <TMC5160_Write_Register+0xa4>)
    address += TMC5160_WRITE_BIT;
 800264a:	f808 1d09 	strb.w	r1, [r8, #-9]!
{
 800264e:	4616      	mov	r6, r2
 8002650:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_RESET);
 8002652:	8881      	ldrh	r1, [r0, #4]
 8002654:	6800      	ldr	r0, [r0, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	f7fe fbf6 	bl	8000e48 <HAL_GPIO_WritePin>
    temp = ((value >> 24UL) & 0xFF);
 800265c:	ad04      	add	r5, sp, #16
    HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 800265e:	4641      	mov	r1, r8
 8002660:	4638      	mov	r0, r7
 8002662:	2364      	movs	r3, #100	; 0x64
 8002664:	2201      	movs	r2, #1
 8002666:	f7ff f8d7 	bl	8001818 <HAL_SPI_Transmit>
    temp = ((value >> 24UL) & 0xFF);
 800266a:	0e33      	lsrs	r3, r6, #24
 800266c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002670:	4638      	mov	r0, r7
 8002672:	4629      	mov	r1, r5
 8002674:	2364      	movs	r3, #100	; 0x64
 8002676:	2201      	movs	r2, #1
 8002678:	f7ff f8ce 	bl	8001818 <HAL_SPI_Transmit>
    temp = ((value >> 16UL) & 0xFF);
 800267c:	ea4f 4c26 	mov.w	ip, r6, asr #16
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002680:	4629      	mov	r1, r5
 8002682:	4638      	mov	r0, r7
 8002684:	2364      	movs	r3, #100	; 0x64
 8002686:	2201      	movs	r2, #1
    temp = ((value >> 16UL) & 0xFF);
 8002688:	f88d c00f 	strb.w	ip, [sp, #15]
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 800268c:	f7ff f8c4 	bl	8001818 <HAL_SPI_Transmit>
    temp = ((value >> 8UL) & 0xFF);
 8002690:	ea4f 2c26 	mov.w	ip, r6, asr #8
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002694:	4629      	mov	r1, r5
 8002696:	4638      	mov	r0, r7
 8002698:	2364      	movs	r3, #100	; 0x64
 800269a:	2201      	movs	r2, #1
    temp = ((value >> 8UL) & 0xFF);
 800269c:	f88d c00f 	strb.w	ip, [sp, #15]
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80026a0:	f7ff f8ba 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80026a4:	4629      	mov	r1, r5
 80026a6:	2364      	movs	r3, #100	; 0x64
 80026a8:	4638      	mov	r0, r7
 80026aa:	2201      	movs	r2, #1
    temp = ((value >> 0UL) & 0xFF);
 80026ac:	f88d 600f 	strb.w	r6, [sp, #15]
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80026b0:	f7ff f8b2 	bl	8001818 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_SET);
 80026b4:	88a1      	ldrh	r1, [r4, #4]
 80026b6:	6820      	ldr	r0, [r4, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f7fe fbc5 	bl	8000e48 <HAL_GPIO_WritePin>
    address = TMC_ADDRESS(address);
 80026be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    handle->shadowRegister[address] = value;
 80026c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c6:	1c9a      	adds	r2, r3, #2
    handle->registerAccess[address] |= TMC_ACCESS_DIRTY;
 80026c8:	4423      	add	r3, r4
    handle->shadowRegister[address] = value;
 80026ca:	f844 6022 	str.w	r6, [r4, r2, lsl #2]
    handle->registerAccess[address] |= TMC_ACCESS_DIRTY;
 80026ce:	f893 2208 	ldrb.w	r2, [r3, #520]	; 0x208
 80026d2:	f042 0208 	orr.w	r2, r2, #8
 80026d6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 80026da:	b004      	add	sp, #16
 80026dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026e0:	200002b4 	.word	0x200002b4

080026e4 <My_Write_Register>:
{
 80026e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	f10d 0810 	add.w	r8, sp, #16
    HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 80026ee:	4d1f      	ldr	r5, [pc, #124]	; (800276c <My_Write_Register+0x88>)
{
 80026f0:	f808 1d09 	strb.w	r1, [r8, #-9]!
 80026f4:	4617      	mov	r7, r2
 80026f6:	4606      	mov	r6, r0
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_RESET);
 80026f8:	8881      	ldrh	r1, [r0, #4]
 80026fa:	6800      	ldr	r0, [r0, #0]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f7fe fba3 	bl	8000e48 <HAL_GPIO_WritePin>
    temp = ((value >> 24UL) & 0xFF);
 8002702:	ac04      	add	r4, sp, #16
    HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 8002704:	4641      	mov	r1, r8
 8002706:	4628      	mov	r0, r5
 8002708:	2364      	movs	r3, #100	; 0x64
 800270a:	2201      	movs	r2, #1
 800270c:	f7ff f884 	bl	8001818 <HAL_SPI_Transmit>
    temp = ((value >> 24UL) & 0xFF);
 8002710:	0e3b      	lsrs	r3, r7, #24
 8002712:	f804 3d01 	strb.w	r3, [r4, #-1]!
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002716:	4628      	mov	r0, r5
 8002718:	4621      	mov	r1, r4
 800271a:	2364      	movs	r3, #100	; 0x64
 800271c:	2201      	movs	r2, #1
 800271e:	f7ff f87b 	bl	8001818 <HAL_SPI_Transmit>
    temp = ((value >> 16UL) & 0xFF);
 8002722:	ea4f 4c27 	mov.w	ip, r7, asr #16
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002726:	4621      	mov	r1, r4
 8002728:	4628      	mov	r0, r5
 800272a:	2364      	movs	r3, #100	; 0x64
 800272c:	2201      	movs	r2, #1
    temp = ((value >> 16UL) & 0xFF);
 800272e:	f88d c00f 	strb.w	ip, [sp, #15]
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002732:	f7ff f871 	bl	8001818 <HAL_SPI_Transmit>
    temp = ((value >> 8UL) & 0xFF);
 8002736:	ea4f 2c27 	mov.w	ip, r7, asr #8
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 800273a:	4621      	mov	r1, r4
 800273c:	4628      	mov	r0, r5
 800273e:	2364      	movs	r3, #100	; 0x64
 8002740:	2201      	movs	r2, #1
    temp = ((value >> 8UL) & 0xFF);
 8002742:	f88d c00f 	strb.w	ip, [sp, #15]
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002746:	f7ff f867 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 800274a:	4621      	mov	r1, r4
 800274c:	2364      	movs	r3, #100	; 0x64
 800274e:	4628      	mov	r0, r5
 8002750:	2201      	movs	r2, #1
    temp = ((value >> 0UL) & 0xFF);
 8002752:	f88d 700f 	strb.w	r7, [sp, #15]
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 8002756:	f7ff f85f 	bl	8001818 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_SET);
 800275a:	88b1      	ldrh	r1, [r6, #4]
 800275c:	6830      	ldr	r0, [r6, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	f7fe fb72 	bl	8000e48 <HAL_GPIO_WritePin>
}
 8002764:	b004      	add	sp, #16
 8002766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800276a:	bf00      	nop
 800276c:	200002b4 	.word	0x200002b4

08002770 <TMC5160_Read_Register>:
{
 8002770:	b570      	push	{r4, r5, r6, lr}
    address = TMC_ADDRESS(address);
 8002772:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    if (!TMC_IS_READABLE(handle->registerAccess[address]))
 8002776:	1843      	adds	r3, r0, r1
{
 8002778:	b084      	sub	sp, #16
    if (!TMC_IS_READABLE(handle->registerAccess[address]))
 800277a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
    address = TMC_ADDRESS(address);
 800277e:	f88d 1007 	strb.w	r1, [sp, #7]
    uint8_t temp = 0x00;
 8002782:	2500      	movs	r5, #0
    if (!TMC_IS_READABLE(handle->registerAccess[address]))
 8002784:	07db      	lsls	r3, r3, #31
    uint8_t temp = 0x00;
 8002786:	f88d 500f 	strb.w	r5, [sp, #15]
    if (!TMC_IS_READABLE(handle->registerAccess[address]))
 800278a:	d405      	bmi.n	8002798 <TMC5160_Read_Register+0x28>
        return handle->shadowRegister[address];
 800278c:	3102      	adds	r1, #2
 800278e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]

    return val;
}
 8002792:	4620      	mov	r0, r4
 8002794:	b004      	add	sp, #16
 8002796:	bd70      	pop	{r4, r5, r6, pc}
 8002798:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_RESET);
 800279a:	462a      	mov	r2, r5
 800279c:	8881      	ldrh	r1, [r0, #4]
 800279e:	6800      	ldr	r0, [r0, #0]
 80027a0:	f7fe fb52 	bl	8000e48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 80027a4:	f10d 0107 	add.w	r1, sp, #7
 80027a8:	2364      	movs	r3, #100	; 0x64
 80027aa:	2201      	movs	r2, #1
 80027ac:	4831      	ldr	r0, [pc, #196]	; (8002874 <TMC5160_Read_Register+0x104>)
 80027ae:	f7ff f833 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80027b2:	f10d 010f 	add.w	r1, sp, #15
 80027b6:	2364      	movs	r3, #100	; 0x64
 80027b8:	2201      	movs	r2, #1
 80027ba:	482e      	ldr	r0, [pc, #184]	; (8002874 <TMC5160_Read_Register+0x104>)
 80027bc:	f7ff f82c 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80027c0:	f10d 010f 	add.w	r1, sp, #15
 80027c4:	2364      	movs	r3, #100	; 0x64
 80027c6:	2201      	movs	r2, #1
 80027c8:	482a      	ldr	r0, [pc, #168]	; (8002874 <TMC5160_Read_Register+0x104>)
 80027ca:	f7ff f825 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80027ce:	f10d 010f 	add.w	r1, sp, #15
 80027d2:	2364      	movs	r3, #100	; 0x64
 80027d4:	2201      	movs	r2, #1
 80027d6:	4827      	ldr	r0, [pc, #156]	; (8002874 <TMC5160_Read_Register+0x104>)
 80027d8:	f7ff f81e 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80027dc:	2364      	movs	r3, #100	; 0x64
 80027de:	f10d 010f 	add.w	r1, sp, #15
 80027e2:	2201      	movs	r2, #1
 80027e4:	4823      	ldr	r0, [pc, #140]	; (8002874 <TMC5160_Read_Register+0x104>)
 80027e6:	f7ff f817 	bl	8001818 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_SET);
 80027ea:	88a1      	ldrh	r1, [r4, #4]
 80027ec:	6820      	ldr	r0, [r4, #0]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f7fe fb2a 	bl	8000e48 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_RESET);
 80027f4:	462a      	mov	r2, r5
 80027f6:	88a1      	ldrh	r1, [r4, #4]
 80027f8:	6820      	ldr	r0, [r4, #0]
 80027fa:	f7fe fb25 	bl	8000e48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 80027fe:	f10d 0107 	add.w	r1, sp, #7
 8002802:	2364      	movs	r3, #100	; 0x64
 8002804:	2201      	movs	r2, #1
 8002806:	481b      	ldr	r0, [pc, #108]	; (8002874 <TMC5160_Read_Register+0x104>)
 8002808:	f7ff f806 	bl	8001818 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 800280c:	f10d 010f 	add.w	r1, sp, #15
 8002810:	2364      	movs	r3, #100	; 0x64
 8002812:	2201      	movs	r2, #1
 8002814:	4817      	ldr	r0, [pc, #92]	; (8002874 <TMC5160_Read_Register+0x104>)
 8002816:	f7ff fae3 	bl	8001de0 <HAL_SPI_Receive>
    val = temp << 24;
 800281a:	f89d 500f 	ldrb.w	r5, [sp, #15]
    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 800281e:	4815      	ldr	r0, [pc, #84]	; (8002874 <TMC5160_Read_Register+0x104>)
 8002820:	f10d 010f 	add.w	r1, sp, #15
 8002824:	2364      	movs	r3, #100	; 0x64
 8002826:	2201      	movs	r2, #1
 8002828:	f7ff fada 	bl	8001de0 <HAL_SPI_Receive>
    val |= temp << 16;
 800282c:	f89d 600f 	ldrb.w	r6, [sp, #15]
    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 8002830:	4810      	ldr	r0, [pc, #64]	; (8002874 <TMC5160_Read_Register+0x104>)
 8002832:	f10d 010f 	add.w	r1, sp, #15
 8002836:	2364      	movs	r3, #100	; 0x64
 8002838:	2201      	movs	r2, #1
 800283a:	f7ff fad1 	bl	8001de0 <HAL_SPI_Receive>
    val = temp << 24;
 800283e:	062d      	lsls	r5, r5, #24
    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 8002840:	f10d 010f 	add.w	r1, sp, #15
 8002844:	2364      	movs	r3, #100	; 0x64
 8002846:	2201      	movs	r2, #1
 8002848:	480a      	ldr	r0, [pc, #40]	; (8002874 <TMC5160_Read_Register+0x104>)
 800284a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    val |= temp << 8;
 800284e:	f89d 600f 	ldrb.w	r6, [sp, #15]
    HAL_SPI_Receive(&hspi1, &temp, 1, 100);
 8002852:	f7ff fac5 	bl	8001de0 <HAL_SPI_Receive>
    val |= temp << 0;
 8002856:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_SET);
 800285a:	88a1      	ldrh	r1, [r4, #4]
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	2201      	movs	r2, #1
    val |= temp << 0;
 8002860:	ea43 0405 	orr.w	r4, r3, r5
    val |= temp << 8;
 8002864:	0236      	lsls	r6, r6, #8
    HAL_GPIO_WritePin(handle->CS_Port, handle->CS_Pin, GPIO_PIN_SET);
 8002866:	f7fe faef 	bl	8000e48 <HAL_GPIO_WritePin>
    val |= temp << 0;
 800286a:	4334      	orrs	r4, r6
}
 800286c:	4620      	mov	r0, r4
 800286e:	b004      	add	sp, #16
 8002870:	bd70      	pop	{r4, r5, r6, pc}
 8002872:	bf00      	nop
 8002874:	200002b4 	.word	0x200002b4

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	4e0d      	ldr	r6, [pc, #52]	; (80028b0 <__libc_init_array+0x38>)
 800287c:	4c0d      	ldr	r4, [pc, #52]	; (80028b4 <__libc_init_array+0x3c>)
 800287e:	1ba4      	subs	r4, r4, r6
 8002880:	10a4      	asrs	r4, r4, #2
 8002882:	2500      	movs	r5, #0
 8002884:	42a5      	cmp	r5, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	4e0b      	ldr	r6, [pc, #44]	; (80028b8 <__libc_init_array+0x40>)
 800288a:	4c0c      	ldr	r4, [pc, #48]	; (80028bc <__libc_init_array+0x44>)
 800288c:	f000 f818 	bl	80028c0 <_init>
 8002890:	1ba4      	subs	r4, r4, r6
 8002892:	10a4      	asrs	r4, r4, #2
 8002894:	2500      	movs	r5, #0
 8002896:	42a5      	cmp	r5, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028a0:	4798      	blx	r3
 80028a2:	3501      	adds	r5, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028aa:	4798      	blx	r3
 80028ac:	3501      	adds	r5, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	08002a9c 	.word	0x08002a9c
 80028b4:	08002a9c 	.word	0x08002a9c
 80028b8:	08002a9c 	.word	0x08002a9c
 80028bc:	08002aa0 	.word	0x08002aa0

080028c0 <_init>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr

080028cc <_fini>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	bf00      	nop
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr
